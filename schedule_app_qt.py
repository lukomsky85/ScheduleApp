import sys
import json
import os
import random
import shutil
import zipfile
from datetime import datetime, timedelta
from pathlib import Path
import pandas as pd
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QSortFilterProxyModel, QModelIndex
from PyQt5.QtGui import QFont, QIcon, QColor, QPalette, QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
    QTabWidget, QTableWidget, QTableWidgetItem, QHeaderView, QLabel, QPushButton,
    QComboBox, QSpinBox, QProgressBar, QStatusBar, QFileDialog, QMessageBox,
    QDialog, QLineEdit, QFormLayout, QDialogButtonBox, QGroupBox, QScrollArea,
    QTreeView, QTableView, QAbstractItemView, QMenu, QAction, QDateEdit, QCalendarWidget,  # <-- –î–û–ë–ê–í–õ–ï–ù–û QTableView
    QFrame, QSizePolicy, QCheckBox, QSpinBox, QDoubleSpinBox, QMenuBar, QToolBar,
    QTextEdit
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º
import calendar
from datetime import datetime as dt_datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ —Ü–≤–µ—Ç–∞
COLORS = {
    'primary': '#4a6fa5',
    'secondary': '#166088',
    'accent': '#47b8e0',
    'success': '#3cba92',
    'warning': '#f4a261',
    'danger': '#e71d36',
    'light': '#f8f9fa',
    'dark': '#343a40',
    'border': '#dee2e6',
    'hover': '#e9ecef'
}

class BellScheduleEditor(QDialog):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤ (Qt –≤–µ—Ä—Å–∏—è)"""
    def __init__(self, parent, current_schedule):
        super().__init__(parent)
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤")
        self.setModal(True)
        self.resize(500, 400)
        self.current_schedule = current_schedule
        self.result = None
        self.setup_ui()
        self.load_schedule_from_string(current_schedule)
    def setup_ui(self):
        layout = QVBoxLayout(self)
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–£—Ä–æ–∫–∏:")
        title_label.setFont(QFont('Segoe UI', 10, QFont.Bold))
        layout.addWidget(title_label)
        # –¢–∞–±–ª–∏—Ü–∞
        self.tree = QTableWidget(0, 3)
        self.tree.setHorizontalHeaderLabels(['‚Ññ', '–ù–∞—á–∞–ª–æ', '–ö–æ–Ω–µ—Ü'])
        self.tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tree.setSelectionMode(QAbstractItemView.SingleSelection)
        layout.addWidget(self.tree, 1)
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        self.edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        self.delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.edit_btn.setEnabled(False)
        self.delete_btn.setEnabled(False)
        self.add_btn.clicked.connect(self.add_interval)
        self.edit_btn.clicked.connect(self.edit_interval)
        self.delete_btn.clicked.connect(self.delete_interval)
        self.save_btn.clicked.connect(self.save_and_close)
        self.tree.itemSelectionChanged.connect(self.on_select)
        buttons_layout.addWidget(self.add_btn)
        buttons_layout.addWidget(self.edit_btn)
        buttons_layout.addWidget(self.delete_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.save_btn)
        layout.addLayout(buttons_layout)
    def load_schedule_from_string(self, schedule_str):
        if not schedule_str.strip():
            return
        intervals = schedule_str.split(',')
        for i, interval in enumerate(intervals):
            parts = interval.strip().split('-')
            if len(parts) == 2:
                start_time, end_time = parts[0].strip(), parts[1].strip()
                row = self.tree.rowCount()
                self.tree.insertRow(row)
                self.tree.setItem(row, 0, QTableWidgetItem(str(i + 1)))
                self.tree.setItem(row, 1, QTableWidgetItem(start_time))
                self.tree.setItem(row, 2, QTableWidgetItem(end_time))
    def add_interval(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        dialog.setModal(True)
        dialog.resize(300, 150)
        form_layout = QFormLayout(dialog)
        start_var = QLineEdit("8:00")
        end_var = QLineEdit("8:45")
        form_layout.addRow("–ù–∞—á–∞–ª–æ (—á:–º–º):", start_var)
        form_layout.addRow("–ö–æ–Ω–µ—Ü (—á:–º–º):", end_var)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_add_interval(start_var.text(), end_var.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_add_interval(self, start_time, end_time, dialog):
        if not start_time or not end_time:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞")
            return
        row = self.tree.rowCount()
        self.tree.insertRow(row)
        self.tree.setItem(row, 0, QTableWidgetItem(str(row + 1)))
        self.tree.setItem(row, 1, QTableWidgetItem(start_time))
        self.tree.setItem(row, 2, QTableWidgetItem(end_time))
        dialog.accept()
    def edit_interval(self):
        selected_items = self.tree.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        row = selected_items[0].row()
        start_time = self.tree.item(row, 1).text()
        end_time = self.tree.item(row, 2).text()
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª")
        dialog.setModal(True)
        dialog.resize(300, 150)
        form_layout = QFormLayout(dialog)
        start_var = QLineEdit(start_time)
        end_var = QLineEdit(end_time)
        form_layout.addRow("–ù–∞—á–∞–ª–æ (—á:–º–º):", start_var)
        form_layout.addRow("–ö–æ–Ω–µ—Ü (—á:–º–º):", end_var)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_edit_interval(row, start_var.text(), end_var.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_edit_interval(self, row, start_time, end_time, dialog):
        if not start_time or not end_time:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞")
            return
        self.tree.setItem(row, 1, QTableWidgetItem(start_time))
        self.tree.setItem(row, 2, QTableWidgetItem(end_time))
        dialog.accept()
    def delete_interval(self):
        selected_items = self.tree.selectedItems()
        if not selected_items:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª?") == QMessageBox.Yes:
            row = selected_items[0].row()
            self.tree.removeRow(row)
            self.renumber_intervals()
    def renumber_intervals(self):
        for row in range(self.tree.rowCount()):
            self.tree.setItem(row, 0, QTableWidgetItem(str(row + 1)))
    def on_select(self):
        selected = self.tree.selectedItems()
        has_selection = len(selected) > 0
        self.edit_btn.setEnabled(has_selection)
        self.delete_btn.setEnabled(has_selection)
    def save_and_close(self):
        intervals = []
        for row in range(self.tree.rowCount()):
            start_time = self.tree.item(row, 1).text()
            end_time = self.tree.item(row, 2).text()
            intervals.append(f"{start_time}-{end_time}")
        self.result = ','.join(intervals)
        self.accept()

class TimeSortProxyModel(QSortFilterProxyModel):
    """–ö–ª–∞—Å—Å-–Ω–∞—Å–ª–µ–¥–Ω–∏–∫ QSortFilterProxyModel –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    
    def lessThan(self, left, right):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ lessThan –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        left_data = self.sourceModel().data(left)
        right_data = self.sourceModel().data(right)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "HH:MM-HH:MM" –≤ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        def parse_time(time_str):
            start_time_str = time_str.split('-')[0].strip()
            return dt_datetime.strptime(start_time_str, '%H:%M')
        
        try:
            left_start = parse_time(left_data)
            right_start = parse_time(right_data)
            return left_start < right_start
        except ValueError:
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            return left_data < right_data

class ScheduleApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üéì –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1200, 800)
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.settings = {
            'days_per_week': 5,
            'lessons_per_day': 6,
            'weeks': 2,
            'start_date': datetime.now().date().isoformat(),
            'school_name': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ',
            'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            'academic_year': f"{datetime.now().year}-{datetime.now().year + 1}",
            'auto_backup': True,
            'backup_interval': 30,
            'max_backups': 10,
            'last_academic_year_update': datetime.now().year
        }
        self.groups = []
        self.teachers = []
        self.classrooms = []
        self.subjects = []
        self.schedule = pd.DataFrame()
        self.substitutions = []
        self.holidays = []
        self.backup_timer = None
        self.last_backup_time = None
        self.next_backup_time = None
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_dir = "backups"
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        self.archive_dir = "schedule_archive"
        if not os.path.exists(self.archive_dir):
            os.makedirs(self.archive_dir)
        self.create_widgets()
        self.load_data()
        self.start_auto_backup()
        self.check_and_update_experience()
    def create_widgets(self):
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        # –ú–µ–Ω—é
        menubar = self.menuBar()
        file_menu = menubar.addMenu("–§–∞–π–ª")
        save_action = QAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self)
        save_action.triggered.connect(self.save_data)
        load_action = QAction("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", self)
        load_action.triggered.connect(self.load_data)
        settings_action = QAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self)
        settings_action.triggered.connect(self.open_settings)
        backup_action = QAction("üõ°Ô∏è –ë—ç–∫–∞–ø", self)
        backup_action.triggered.connect(self.open_backup_manager)
        about_action = QAction("‚ùì –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        file_menu.addAction(save_action)
        file_menu.addAction(load_action)
        file_menu.addAction(settings_action)
        file_menu.addAction(backup_action)
        file_menu.addAction(about_action)
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = QFrame()
        title_layout = QHBoxLayout(title_frame)
        title_label = QLabel("üéì –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        title_label.setFont(QFont('Segoe UI', 18, QFont.Bold))
        title_label.setStyleSheet(f"color: {COLORS['secondary']};")
        title_layout.addWidget(title_label)
        title_layout.addStretch()
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞
        backup_indicator_frame = QFrame()
        backup_indicator_layout = QVBoxLayout(backup_indicator_frame)
        self.backup_status_label = QLabel("–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–ö–õ")
        self.backup_status_label.setFont(QFont('Segoe UI', 10, QFont.Bold))
        self.backup_status_label.setStyleSheet(f"color: {COLORS['success']};")
        self.backup_info_label = QLabel("–°–ª–µ–¥—É—é—â–∏–π: --:--")
        self.backup_info_label.setFont(QFont('Segoe UI', 10, QFont.Bold))
        backup_indicator_layout.addWidget(self.backup_status_label)
        backup_indicator_layout.addWidget(self.backup_info_label)
        title_layout.addWidget(backup_indicator_frame)
        main_layout.addWidget(title_frame)
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_frame = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        settings_layout = QGridLayout(settings_frame)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        days_label = QLabel("–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:")
        self.days_var = QSpinBox()
        self.days_var.setRange(1, 7)
        self.days_var.setValue(self.settings['days_per_week'])
        lessons_label = QLabel("–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:")
        self.lessons_var = QSpinBox()
        self.lessons_var.setRange(1, 12)
        self.lessons_var.setValue(self.settings['lessons_per_day'])
        weeks_label = QLabel("–ù–µ–¥–µ–ª—å:")
        self.weeks_var = QSpinBox()
        self.weeks_var.setRange(1, 12)
        self.weeks_var.setValue(self.settings['weeks'])
        settings_layout.addWidget(days_label, 0, 0)
        settings_layout.addWidget(self.days_var, 0, 1)
        settings_layout.addWidget(lessons_label, 0, 2)
        settings_layout.addWidget(self.lessons_var, 0, 3)
        settings_layout.addWidget(weeks_label, 0, 4)
        settings_layout.addWidget(self.weeks_var, 0, 5)
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = QFrame()
        buttons_layout = QHBoxLayout(buttons_frame)
        generate_btn = QPushButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        generate_btn.clicked.connect(self.generate_schedule_thread)
        check_btn = QPushButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç")
        check_btn.clicked.connect(self.check_conflicts)
        optimize_btn = QPushButton("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
        optimize_btn.clicked.connect(self.optimize_schedule)
        reports_btn = QPushButton("üìä –û—Ç—á–µ—Ç—ã")
        reports_btn.clicked.connect(self.show_reports)
        export_excel_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        export_excel_btn.clicked.connect(self.export_to_excel)
        export_html_btn = QPushButton("üåê –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML")
        export_html_btn.clicked.connect(self.export_to_html)
        substitutions_btn = QPushButton("üîÑ –ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω")
        substitutions_btn.clicked.connect(self.open_substitutions)
        buttons_layout.addWidget(generate_btn)
        buttons_layout.addWidget(check_btn)
        buttons_layout.addWidget(optimize_btn)
        buttons_layout.addWidget(reports_btn)
        buttons_layout.addWidget(export_excel_btn)
        buttons_layout.addWidget(export_html_btn)
        buttons_layout.addWidget(substitutions_btn)
        buttons_layout.addStretch()
        settings_layout.addWidget(buttons_frame, 1, 0, 1, 6)
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = QProgressBar()
        self.progress.setRange(0, 0)  # Indeterminate
        self.progress.hide()
        settings_layout.addWidget(self.progress, 2, 0, 1, 6)
        main_layout.addWidget(settings_frame)
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.notebook = QTabWidget()
        main_layout.addWidget(self.notebook, 1)
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_groups_tab()
        self.create_teachers_tab()
        self.create_classrooms_tab()
        self.create_subjects_tab()
        self.create_schedule_tab()
        self.create_reports_tab()
        self.create_holidays_tab()
        self.create_archive_tab()
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.statusBar = QStatusBar()
        self.setStatusBar(self.statusBar)
        self.status_var = "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        self.statusBar.showMessage(self.status_var)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—ç–∫–∞–ø–∞
        self.update_backup_indicator()
    def create_groups_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
        add_btn.clicked.connect(self.add_group)
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.clicked.connect(self.edit_group)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É")
        delete_btn.clicked.connect(self.delete_group)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(edit_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addStretch()
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.groups_tree = QTableWidget(0, 6)
        self.groups_tree.setHorizontalHeaderLabels(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–°—Ç—É–¥–µ–Ω—Ç—ã', '–ö—É—Ä—Å', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'])
        self.groups_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.groups_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.groups_tree, 1)
        self.notebook.addTab(tab, "üë• –ì—Ä—É–ø–ø—ã")
    def create_teachers_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        add_btn.clicked.connect(self.add_teacher)
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.clicked.connect(self.edit_teacher)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        delete_btn.clicked.connect(self.delete_teacher)
        update_exp_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–∂")
        update_exp_btn.clicked.connect(self.update_all_experience)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(edit_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addWidget(update_exp_btn)
        btn_layout.addStretch()
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.teachers_tree = QTableWidget(0, 6)
        self.teachers_tree.setHorizontalHeaderLabels(['ID', '–§–ò–û', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ú–∞–∫—Å. —á–∞—Å–æ–≤', '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è', '–°—Ç–∞–∂'])
        self.teachers_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.teachers_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.teachers_tree, 1)
        self.notebook.addTab(tab, "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
    def create_classrooms_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        add_btn.clicked.connect(self.add_classroom)
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.clicked.connect(self.edit_classroom)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        delete_btn.clicked.connect(self.delete_classroom)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(edit_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addStretch()
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.classrooms_tree = QTableWidget(0, 6)
        self.classrooms_tree.setHorizontalHeaderLabels(['ID', '–ù–æ–º–µ—Ä', '–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–¢–∏–ø', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'])
        self.classrooms_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.classrooms_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.classrooms_tree, 1)
        self.notebook.addTab(tab, "üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏")
    def create_subjects_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        add_btn.clicked.connect(self.add_subject)
        edit_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_btn.clicked.connect(self.edit_subject)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        delete_btn.clicked.connect(self.delete_subject)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(edit_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addStretch()
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.subjects_tree = QTableWidget(0, 6)
        self.subjects_tree.setHorizontalHeaderLabels(['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø –≥—Ä—É–ø–ø—ã', '–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é', '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è', '–ö–∞—Ñ–µ–¥—Ä–∞'])
        self.subjects_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.subjects_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.subjects_tree, 1)
        self.notebook.addTab(tab, "üìö –ü—Ä–µ–¥–º–µ—Ç—ã")
    def create_schedule_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame = QFrame()
        filter_layout = QHBoxLayout(filter_frame)
        filter_layout.addWidget(QLabel("–§–∏–ª—å—Ç—Ä—ã:"))
        # –ù–µ–¥–µ–ª—è
        week_layout = QHBoxLayout()
        week_layout.addWidget(QLabel("–ù–µ–¥–µ–ª—è:"))
        self.week_var = QComboBox()
        self.week_var.addItems([f"–ù–µ–¥–µ–ª—è {i}" for i in range(1, 13)])
        self.week_var.setCurrentIndex(0)
        self.week_var.currentIndexChanged.connect(self.filter_schedule)
        week_layout.addWidget(self.week_var)
        filter_layout.addLayout(week_layout)
        # –ì—Ä—É–ø–ø–∞
        group_layout = QHBoxLayout()
        group_layout.addWidget(QLabel("–ì—Ä—É–ø–ø–∞:"))
        self.group_filter_var = QComboBox()
        self.group_filter_var.addItem("")
        group_layout.addWidget(self.group_filter_var)
        filter_layout.addLayout(group_layout)
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        teacher_layout = QHBoxLayout()
        teacher_layout.addWidget(QLabel("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:"))
        self.teacher_filter_var = QComboBox()
        self.teacher_filter_var.addItem("")
        teacher_layout.addWidget(self.teacher_filter_var)
        filter_layout.addLayout(teacher_layout)
        # –ê—É–¥–∏—Ç–æ—Ä–∏—è
        classroom_layout = QHBoxLayout()
        classroom_layout.addWidget(QLabel("–ê—É–¥–∏—Ç–æ—Ä–∏—è:"))
        self.classroom_filter_var = QComboBox()
        self.classroom_filter_var.addItem("")
        classroom_layout.addWidget(self.classroom_filter_var)
        filter_layout.addLayout(classroom_layout)
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.filter_schedule)
        filter_layout.addWidget(refresh_btn)
        filter_layout.addStretch()
        layout.addWidget(filter_frame)
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        schedule_buttons_frame = QFrame()
        buttons_layout = QHBoxLayout(schedule_buttons_frame)
        buttons = [
            ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.add_lesson),
            ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", self.edit_lesson),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.delete_lesson),
            ("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.substitute_lesson),
            ("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", self.show_calendar),
            ("üåê –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML", self.export_to_html),
            ("‚è±Ô∏è –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", self.find_free_slot)
        ]
        for text, command in buttons:
            btn = QPushButton(text)
            btn.clicked.connect(command)
            buttons_layout.addWidget(btn)
        buttons_layout.addStretch()
        layout.addWidget(schedule_buttons_frame)
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        self.schedule_model = QStandardItemModel()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.schedule_model.setHorizontalHeaderLabels(['–í—Ä–µ–º—è', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Å–∏-–º–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.schedule_proxy_model = TimeSortProxyModel(self)
        self.schedule_proxy_model.setSourceModel(self.schedule_model)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç —Ç–∞–±–ª–∏—Ü—ã
        self.schedule_view = QTableView()
        self.schedule_view.setModel(self.schedule_proxy_model)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–∞ "–í—Ä–µ–º—è"
        self.schedule_view.setColumnWidth(0, 100)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
        self.schedule_view.verticalHeader().setDefaultSectionSize(100)
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫
        self.schedule_view.setSelectionBehavior(QAbstractItemView.SelectItems)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–≤—Ä–µ–º—è) –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–µ
        # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.schedule_view.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout.addWidget(self.schedule_view, 1)
        self.notebook.addTab(tab, "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    def create_reports_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –í–∫–ª–∞–¥–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
        reports_notebook = QTabWidget()
        layout.addWidget(reports_notebook, 1)
        # –û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teacher_report_frame = QWidget()
        teacher_report_layout = QVBoxLayout(teacher_report_frame)
        self.teacher_report_tree = QTableWidget(0, 4)
        self.teacher_report_tree.setHorizontalHeaderLabels(['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ß–∞—Å—ã', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã'])
        self.teacher_report_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        teacher_report_layout.addWidget(self.teacher_report_tree, 1)
        reports_notebook.addTab(teacher_report_frame, "üë®‚Äçüè´ –ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        # –û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø
        group_report_frame = QWidget()
        group_report_layout = QVBoxLayout(group_report_frame)
        self.group_report_tree = QTableWidget(0, 4)
        self.group_report_tree.setHorizontalHeaderLabels(['–ì—Ä—É–ø–ø–∞', '–ß–∞—Å—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏'])
        self.group_report_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        group_report_layout.addWidget(self.group_report_tree, 1)
        reports_notebook.addTab(group_report_frame, "üë• –ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø")
        # –û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º
        conflicts_frame = QWidget()
        conflicts_layout = QVBoxLayout(conflicts_frame)
        self.conflicts_text = QTextEdit()
        self.conflicts_text.setReadOnly(True)
        conflicts_layout.addWidget(self.conflicts_text, 1)
        reports_notebook.addTab(conflicts_frame, "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary_frame = QWidget()
        summary_layout = QVBoxLayout(summary_frame)
        self.summary_text = QTextEdit()
        self.summary_text.setReadOnly(True)
        summary_layout.addWidget(self.summary_text, 1)
        reports_notebook.addTab(summary_frame, "üìã –°–≤–æ–¥–∫–∞")
        self.notebook.addTab(tab, "üìà –û—Ç—á–µ—Ç—ã")
    def create_holidays_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
        add_btn.clicked.connect(self.add_holiday)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
        delete_btn.clicked.connect(self.delete_holiday)
        btn_layout.addWidget(add_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addStretch()
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.holidays_tree = QTableWidget(0, 3)
        self.holidays_tree.setHorizontalHeaderLabels(['–î–∞—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø'])
        self.holidays_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.holidays_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.holidays_tree, 1)
        self.notebook.addTab(tab, "üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏")
    def create_archive_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)
        # –ö–Ω–æ–ø–∫–∏
        btn_frame = QFrame()
        btn_layout = QHBoxLayout(btn_frame)
        save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        save_btn.clicked.connect(self.save_current_schedule)
        load_btn = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        load_btn.clicked.connect(self.load_archived_schedule)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_btn.clicked.connect(self.delete_archived_schedule)
        export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        export_btn.clicked.connect(self.export_archived_schedule)
        btn_layout.addWidget(save_btn)
        btn_layout.addWidget(load_btn)
        btn_layout.addWidget(delete_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(export_btn)
        layout.addWidget(btn_frame)
        # –¢–∞–±–ª–∏—Ü–∞
        self.archive_tree = QTableWidget(0, 7)
        self.archive_tree.setHorizontalHeaderLabels(['–ò–º—è —Ñ–∞–π–ª–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ê—É–¥–∏—Ç–æ—Ä–∏–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ó–∞–Ω—è—Ç–∏–π'])
        self.archive_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.archive_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.archive_tree, 1)
        self.notebook.addTab(tab, "üíæ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã ---
    def load_groups_data(self):
        self.groups_tree.setRowCount(0)
        for group in self.groups:
            row = self.groups_tree.rowCount()
            self.groups_tree.insertRow(row)
            self.groups_tree.setItem(row, 0, QTableWidgetItem(str(group['id'])))
            self.groups_tree.setItem(row, 1, QTableWidgetItem(group['name']))
            self.groups_tree.setItem(row, 2, QTableWidgetItem(group.get('type', '–æ—Å–Ω–æ–≤–Ω–æ–µ')))
            self.groups_tree.setItem(row, 3, QTableWidgetItem(str(group.get('students', 0))))
            self.groups_tree.setItem(row, 4, QTableWidgetItem(group.get('course', '')))
            self.groups_tree.setItem(row, 5, QTableWidgetItem(group.get('specialty', '')))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞ –≥—Ä—É–ø–ø
        self.group_filter_var.clear()
        self.group_filter_var.addItem("")
        for group in self.groups:
            self.group_filter_var.addItem(group['name'])
    def load_teachers_data(self):
        self.teachers_tree.setRowCount(0)
        for teacher in self.teachers:
            row = self.teachers_tree.rowCount()
            self.teachers_tree.insertRow(row)
            self.teachers_tree.setItem(row, 0, QTableWidgetItem(str(teacher['id'])))
            self.teachers_tree.setItem(row, 1, QTableWidgetItem(teacher['name']))
            self.teachers_tree.setItem(row, 2, QTableWidgetItem(teacher.get('subjects', '')))
            self.teachers_tree.setItem(row, 3, QTableWidgetItem(str(teacher.get('max_hours', 0))))
            self.teachers_tree.setItem(row, 4, QTableWidgetItem(teacher.get('qualification', '')))
            self.teachers_tree.setItem(row, 5, QTableWidgetItem(str(teacher.get('experience', 0))))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        self.teacher_filter_var.clear()
        self.teacher_filter_var.addItem("")
        for teacher in self.teachers:
            self.teacher_filter_var.addItem(teacher['name'])
    def load_classrooms_data(self):
        self.classrooms_tree.setRowCount(0)
        for classroom in self.classrooms:
            row = self.classrooms_tree.rowCount()
            self.classrooms_tree.insertRow(row)
            self.classrooms_tree.setItem(row, 0, QTableWidgetItem(str(classroom['id'])))
            self.classrooms_tree.setItem(row, 1, QTableWidgetItem(classroom['name']))
            self.classrooms_tree.setItem(row, 2, QTableWidgetItem(str(classroom.get('capacity', 0))))
            self.classrooms_tree.setItem(row, 3, QTableWidgetItem(classroom.get('type', '–æ–±—ã—á–Ω–∞—è')))
            self.classrooms_tree.setItem(row, 4, QTableWidgetItem(classroom.get('equipment', '')))
            self.classrooms_tree.setItem(row, 5, QTableWidgetItem(classroom.get('location', '')))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π
        self.classroom_filter_var.clear()
        self.classroom_filter_var.addItem("")
        for classroom in self.classrooms:
            self.classroom_filter_var.addItem(classroom['name'])
    def load_subjects_data(self):
        self.subjects_tree.setRowCount(0)
        for subject in self.subjects:
            row = self.subjects_tree.rowCount()
            self.subjects_tree.insertRow(row)
            self.subjects_tree.setItem(row, 0, QTableWidgetItem(str(subject['id'])))
            self.subjects_tree.setItem(row, 1, QTableWidgetItem(subject['name']))
            self.subjects_tree.setItem(row, 2, QTableWidgetItem(subject.get('group_type', '–æ—Å–Ω–æ–≤–Ω–æ–µ')))
            self.subjects_tree.setItem(row, 3, QTableWidgetItem(str(subject.get('hours_per_week', 0))))
            self.subjects_tree.setItem(row, 4, QTableWidgetItem(subject.get('assessment', '')))
            self.subjects_tree.setItem(row, 5, QTableWidgetItem(subject.get('department', '')))
    def load_holidays_data(self):
        self.holidays_tree.setRowCount(0)
        for holiday in self.holidays:
            row = self.holidays_tree.rowCount()
            self.holidays_tree.insertRow(row)
            self.holidays_tree.setItem(row, 0, QTableWidgetItem(holiday.get('date', '')))
            self.holidays_tree.setItem(row, 1, QTableWidgetItem(holiday.get('name', '')))
            self.holidays_tree.setItem(row, 2, QTableWidgetItem(holiday.get('type', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π')))
    # --- –ú–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è ---
    def add_group(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
        dialog.setModal(True)
        dialog.resize(400, 300)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit()
        type_combo = QComboBox()
        type_combo.addItems(["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"])
        students_spin = QSpinBox()
        students_spin.setRange(1, 100)
        students_spin.setValue(25)
        course_entry = QLineEdit()
        specialty_entry = QLineEdit()
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_entry)
        form_layout.addRow("–¢–∏–ø:", type_combo)
        form_layout.addRow("–°—Ç—É–¥–µ–Ω—Ç–æ–≤:", students_spin)
        form_layout.addRow("–ö—É—Ä—Å:", course_entry)
        form_layout.addRow("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", specialty_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_group(name_entry.text(), type_combo.currentText(), students_spin.value(), course_entry.text(), specialty_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_group(self, name, group_type, students, course, specialty, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
            return
        new_id = max([g['id'] for g in self.groups], default=0) + 1
        self.groups.append({
            'id': new_id,
            'name': name,
            'type': group_type,
            'students': students,
            'course': course,
            'specialty': specialty
        })
        self.load_groups_data()
        self.create_backup()
        dialog.accept()
    def edit_group(self):
        selected_items = self.groups_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        row = selected_items[0].row()
        group_id = int(self.groups_tree.item(row, 0).text())
        group = next((g for g in self.groups if g['id'] == group_id), None)
        if not group:
            return
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
        dialog.setModal(True)
        dialog.resize(400, 300)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit(group['name'])
        type_combo = QComboBox()
        type_combo.addItems(["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"])
        type_combo.setCurrentText(group.get('type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'))
        students_spin = QSpinBox()
        students_spin.setRange(1, 100)
        students_spin.setValue(group.get('students', 25))
        course_entry = QLineEdit(group.get('course', ''))
        specialty_entry = QLineEdit(group.get('specialty', ''))
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_entry)
        form_layout.addRow("–¢–∏–ø:", type_combo)
        form_layout.addRow("–°—Ç—É–¥–µ–Ω—Ç–æ–≤:", students_spin)
        form_layout.addRow("–ö—É—Ä—Å:", course_entry)
        form_layout.addRow("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", specialty_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._update_group(group, name_entry.text(), type_combo.currentText(), students_spin.value(), course_entry.text(), specialty_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _update_group(self, group, name, group_type, students, course, specialty, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
            return
        group['name'] = name
        group['type'] = group_type
        group['students'] = students
        group['course'] = course
        group['specialty'] = specialty
        self.load_groups_data()
        self.create_backup()
        dialog.accept()
    def delete_group(self):
        selected_items = self.groups_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É?") == QMessageBox.Yes:
            row = selected_items[0].row()
            group_id = int(self.groups_tree.item(row, 0).text())
            self.groups = [g for g in self.groups if g['id'] != group_id]
            self.load_groups_data()
            self.create_backup()
    def add_teacher(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        dialog.setModal(True)
        dialog.resize(450, 500)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit()
        subjects_entry = QLineEdit()
        max_hours_spin = QSpinBox()
        max_hours_spin.setRange(1, 50)
        max_hours_spin.setValue(20)
        qualification_entry = QLineEdit()
        experience_spin = QSpinBox()
        experience_spin.setRange(0, 50)
        experience_spin.setValue(0)
        contacts_entry = QLineEdit()
        forbidden_days_entry = QLineEdit()
        preferred_days_entry = QLineEdit()
        max_lessons_per_day_spin = QSpinBox()
        max_lessons_per_day_spin.setRange(1, 12)
        max_lessons_per_day_spin.setValue(6)
        form_layout.addRow("–§–ò–û:", name_entry)
        form_layout.addRow("–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", subjects_entry)
        form_layout.addRow("–ú–∞–∫—Å. —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:", max_hours_spin)
        form_layout.addRow("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:", qualification_entry)
        form_layout.addRow("–°—Ç–∞–∂ (–ª–µ—Ç):", experience_spin)
        form_layout.addRow("–ö–æ–Ω—Ç–∞–∫—Ç—ã:", contacts_entry)
        form_layout.addRow("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–Ω–∏:", forbidden_days_entry)
        form_layout.addRow("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏:", preferred_days_entry)
        form_layout.addRow("–ú–∞–∫—Å. –ø–∞—Ä –≤ –¥–µ–Ω—å:", max_lessons_per_day_spin)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_teacher(
            name_entry.text(), subjects_entry.text(), max_hours_spin.value(),
            qualification_entry.text(), experience_spin.value(), contacts_entry.text(),
            forbidden_days_entry.text(), preferred_days_entry.text(), max_lessons_per_day_spin.value(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_teacher(self, name, subjects, max_hours, qualification, experience, contacts,
                     forbidden_days, preferred_days, max_lessons_per_day, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            return
        new_id = max([t['id'] for t in self.teachers], default=0) + 1
        self.teachers.append({
            'id': new_id,
            'name': name,
            'subjects': subjects,
            'max_hours': max_hours,
            'qualification': qualification,
            'experience': experience,
            'contacts': contacts,
            'forbidden_days': forbidden_days,
            'preferred_days': preferred_days,
            'max_lessons_per_day': max_lessons_per_day
        })
        self.load_teachers_data()
        self.create_backup()
        dialog.accept()
    def edit_teacher(self):
        selected_items = self.teachers_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        row = selected_items[0].row()
        teacher_id = int(self.teachers_tree.item(row, 0).text())
        teacher = next((t for t in self.teachers if t['id'] == teacher_id), None)
        if not teacher:
            return
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        dialog.setModal(True)
        dialog.resize(450, 500)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit(teacher['name'])
        subjects_entry = QLineEdit(teacher.get('subjects', ''))
        max_hours_spin = QSpinBox()
        max_hours_spin.setRange(1, 50)
        max_hours_spin.setValue(teacher.get('max_hours', 20))
        qualification_entry = QLineEdit(teacher.get('qualification', ''))
        experience_spin = QSpinBox()
        experience_spin.setRange(0, 50)
        experience_spin.setValue(teacher.get('experience', 0))
        contacts_entry = QLineEdit(teacher.get('contacts', ''))
        forbidden_days_entry = QLineEdit(teacher.get('forbidden_days', ''))
        preferred_days_entry = QLineEdit(teacher.get('preferred_days', ''))
        max_lessons_per_day_spin = QSpinBox()
        max_lessons_per_day_spin.setRange(1, 12)
        max_lessons_per_day_spin.setValue(teacher.get('max_lessons_per_day', 6))
        form_layout.addRow("–§–ò–û:", name_entry)
        form_layout.addRow("–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", subjects_entry)
        form_layout.addRow("–ú–∞–∫—Å. —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:", max_hours_spin)
        form_layout.addRow("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:", qualification_entry)
        form_layout.addRow("–°—Ç–∞–∂ (–ª–µ—Ç):", experience_spin)
        form_layout.addRow("–ö–æ–Ω—Ç–∞–∫—Ç—ã:", contacts_entry)
        form_layout.addRow("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–Ω–∏:", forbidden_days_entry)
        form_layout.addRow("–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏:", preferred_days_entry)
        form_layout.addRow("–ú–∞–∫—Å. –ø–∞—Ä –≤ –¥–µ–Ω—å:", max_lessons_per_day_spin)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._update_teacher(
            teacher, name_entry.text(), subjects_entry.text(), max_hours_spin.value(),
            qualification_entry.text(), experience_spin.value(), contacts_entry.text(),
            forbidden_days_entry.text(), preferred_days_entry.text(), max_lessons_per_day_spin.value(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _update_teacher(self, teacher, name, subjects, max_hours, qualification, experience, contacts,
                       forbidden_days, preferred_days, max_lessons_per_day, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            return
        teacher['name'] = name
        teacher['subjects'] = subjects
        teacher['max_hours'] = max_hours
        teacher['qualification'] = qualification
        teacher['experience'] = experience
        teacher['contacts'] = contacts
        teacher['forbidden_days'] = forbidden_days
        teacher['preferred_days'] = preferred_days
        teacher['max_lessons_per_day'] = max_lessons_per_day
        self.load_teachers_data()
        self.create_backup()
        dialog.accept()
    def delete_teacher(self):
        selected_items = self.teachers_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?") == QMessageBox.Yes:
            row = selected_items[0].row()
            teacher_id = int(self.teachers_tree.item(row, 0).text())
            self.teachers = [t for t in self.teachers if t['id'] != teacher_id]
            self.load_teachers_data()
            self.create_backup()
    def update_all_experience(self):
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–∂ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 1 –≥–æ–¥?") == QMessageBox.Yes:
            updated_count = 0
            for teacher in self.teachers:
                teacher['experience'] = teacher.get('experience', 0) + 1
                updated_count += 1
            self.load_teachers_data()
            self.create_backup()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω —É {updated_count} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
    def add_classroom(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        dialog.setModal(True)
        dialog.resize(400, 300)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit()
        capacity_spin = QSpinBox()
        capacity_spin.setRange(1, 200)
        capacity_spin.setValue(30)
        type_combo = QComboBox()
        type_combo.addItems(["–æ–±—ã—á–Ω–∞—è", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"])
        equipment_entry = QLineEdit()
        location_entry = QLineEdit()
        form_layout.addRow("–ù–æ–º–µ—Ä:", name_entry)
        form_layout.addRow("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:", capacity_spin)
        form_layout.addRow("–¢–∏–ø:", type_combo)
        form_layout.addRow("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:", equipment_entry)
        form_layout.addRow("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", location_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_classroom(
            name_entry.text(), capacity_spin.value(), type_combo.currentText(),
            equipment_entry.text(), location_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_classroom(self, name, capacity, room_type, equipment, location, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
            return
        new_id = max([c['id'] for c in self.classrooms], default=0) + 1
        self.classrooms.append({
            'id': new_id,
            'name': name,
            'capacity': capacity,
            'type': room_type,
            'equipment': equipment,
            'location': location
        })
        self.load_classrooms_data()
        self.create_backup()
        dialog.accept()
    def edit_classroom(self):
        selected_items = self.classrooms_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        row = selected_items[0].row()
        classroom_id = int(self.classrooms_tree.item(row, 0).text())
        classroom = next((c for c in self.classrooms if c['id'] == classroom_id), None)
        if not classroom:
            return
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        dialog.setModal(True)
        dialog.resize(400, 300)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit(classroom['name'])
        capacity_spin = QSpinBox()
        capacity_spin.setRange(1, 200)
        capacity_spin.setValue(classroom.get('capacity', 30))
        type_combo = QComboBox()
        type_combo.addItems(["–æ–±—ã—á–Ω–∞—è", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"])
        type_combo.setCurrentText(classroom.get('type', '–æ–±—ã—á–Ω–∞—è'))
        equipment_entry = QLineEdit(classroom.get('equipment', ''))
        location_entry = QLineEdit(classroom.get('location', ''))
        form_layout.addRow("–ù–æ–º–µ—Ä:", name_entry)
        form_layout.addRow("–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:", capacity_spin)
        form_layout.addRow("–¢–∏–ø:", type_combo)
        form_layout.addRow("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:", equipment_entry)
        form_layout.addRow("–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", location_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._update_classroom(
            classroom, name_entry.text(), capacity_spin.value(), type_combo.currentText(),
            equipment_entry.text(), location_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _update_classroom(self, classroom, name, capacity, room_type, equipment, location, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
            return
        classroom['name'] = name
        classroom['capacity'] = capacity
        classroom['type'] = room_type
        classroom['equipment'] = equipment
        classroom['location'] = location
        self.load_classrooms_data()
        self.create_backup()
        dialog.accept()
    def delete_classroom(self):
        selected_items = self.classrooms_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é?") == QMessageBox.Yes:
            row = selected_items[0].row()
            classroom_id = int(self.classrooms_tree.item(row, 0).text())
            self.classrooms = [c for c in self.classrooms if c['id'] != classroom_id]
            self.load_classrooms_data()
            self.create_backup()
    def add_subject(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        dialog.setModal(True)
        dialog.resize(450, 350)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit()
        group_type_combo = QComboBox()
        group_type_combo.addItems(["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"])
        hours_spin = QSpinBox()
        hours_spin.setRange(1, 20)
        hours_spin.setValue(4)
        assessment_combo = QComboBox()
        assessment_combo.addItems(["—ç–∫–∑–∞–º–µ–Ω", "–∑–∞—á–µ—Ç", "–∑–∞—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π", "–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç"])
        department_entry = QLineEdit()
        description_entry = QLineEdit()
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_entry)
        form_layout.addRow("–¢–∏–ø –≥—Ä—É–ø–ø—ã:", group_type_combo)
        form_layout.addRow("–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:", hours_spin)
        form_layout.addRow("–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:", assessment_combo)
        form_layout.addRow("–ö–∞—Ñ–µ–¥—Ä–∞:", department_entry)
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_subject(
            name_entry.text(), group_type_combo.currentText(), hours_spin.value(),
            assessment_combo.currentText(), department_entry.text(), description_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_subject(self, name, group_type, hours_per_week, assessment, department, description, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
        new_id = max([s['id'] for s in self.subjects], default=0) + 1
        self.subjects.append({
            'id': new_id,
            'name': name,
            'group_type': group_type,
            'hours_per_week': hours_per_week,
            'assessment': assessment,
            'department': department,
            'description': description
        })
        self.load_subjects_data()
        self.create_backup()
        dialog.accept()
    def edit_subject(self):
        selected_items = self.subjects_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        row = selected_items[0].row()
        subject_id = int(self.subjects_tree.item(row, 0).text())
        subject = next((s for s in self.subjects if s['id'] == subject_id), None)
        if not subject:
            return
        dialog = QDialog(self)
        dialog.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        dialog.setModal(True)
        dialog.resize(450, 350)
        form_layout = QFormLayout(dialog)
        name_entry = QLineEdit(subject['name'])
        group_type_combo = QComboBox()
        group_type_combo.addItems(["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"])
        group_type_combo.setCurrentText(subject.get('group_type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'))
        hours_spin = QSpinBox()
        hours_spin.setRange(1, 20)
        hours_spin.setValue(subject.get('hours_per_week', 4))
        assessment_combo = QComboBox()
        assessment_combo.addItems(["—ç–∫–∑–∞–º–µ–Ω", "–∑–∞—á–µ—Ç", "–∑–∞—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π", "–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç"])
        assessment_combo.setCurrentText(subject.get('assessment', '—ç–∫–∑–∞–º–µ–Ω'))
        department_entry = QLineEdit(subject.get('department', ''))
        description_entry = QLineEdit(subject.get('description', ''))
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_entry)
        form_layout.addRow("–¢–∏–ø –≥—Ä—É–ø–ø—ã:", group_type_combo)
        form_layout.addRow("–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:", hours_spin)
        form_layout.addRow("–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:", assessment_combo)
        form_layout.addRow("–ö–∞—Ñ–µ–¥—Ä–∞:", department_entry)
        form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", description_entry)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._update_subject(
            subject, name_entry.text(), group_type_combo.currentText(), hours_spin.value(),
            assessment_combo.currentText(), department_entry.text(), description_entry.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _update_subject(self, subject, name, group_type, hours_per_week, assessment, department, description, dialog):
        if not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
        subject['name'] = name
        subject['group_type'] = group_type
        subject['hours_per_week'] = hours_per_week
        subject['assessment'] = assessment
        subject['department'] = department
        subject['description'] = description
        self.load_subjects_data()
        self.create_backup()
        dialog.accept()
    def delete_subject(self):
        selected_items = self.subjects_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?") == QMessageBox.Yes:
            row = selected_items[0].row()
            subject_id = int(self.subjects_tree.item(row, 0).text())
            self.subjects = [s for s in self.subjects if s['id'] != subject_id]
            self.load_subjects_data()
            self.create_backup()
    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    def generate_schedule_thread(self):
        self.progress.show()
        self.statusBar.showMessage("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–ª—Å—è –±—ã –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.
        self.generate_schedule()
    def generate_schedule(self):
        try:
            if not self.groups:
                raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")
            if not self.subjects:
                raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç")
            if not self.teachers:
                raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
            if not self.classrooms:
                raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞—É–¥–∏—Ç–æ—Ä–∏—é")
            self.settings['days_per_week'] = self.days_var.value()
            self.settings['lessons_per_day'] = self.lessons_var.value()
            self.settings['weeks'] = self.weeks_var.value()
            holiday_dates = []
            for h in self.holidays:
                try:
                    holiday_dates.append(datetime.strptime(h['date'], '%Y-%m-%d').date())
                except ValueError:
                    continue
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
            start_date = datetime.strptime(self.settings['start_date'], '%Y-%m-%d').date()
            all_dates = []
            for week in range(self.settings['weeks']):
                for day_index, day_name in enumerate(days):
                    current_date = start_date + timedelta(weeks=week, days=day_index)
                    if current_date not in holiday_dates:
                        all_dates.append((week+1, day_name, current_date))
            schedule_data = []
            lesson_id = 1
            bell_schedule_str = self.settings.get('bell_schedule', '8:00-8:45,8:55-9:40,9:50-10:35,10:45-11:30,11:40-12:25,12:35-13:20')
            times = [slot.strip() for slot in bell_schedule_str.split(',')]
            for week_num, day_name, _ in all_dates:
                for time_slot in times:
                    for group in self.groups:
                        schedule_data.append({
                            'id': lesson_id,
                            'week': week_num,
                            'day': day_name,
                            'time': time_slot,
                            'group_id': group['id'],
                            'group_name': group['name'],
                            'subject_id': None,
                            'subject_name': '',
                            'teacher_id': None,
                            'teacher_name': '',
                            'classroom_id': None,
                            'classroom_name': '',
                            'status': '—Å–≤–æ–±–æ–¥–Ω–æ'
                        })
                        lesson_id += 1
            self.schedule = pd.DataFrame(schedule_data)
            self.assign_subjects_to_groups()
            self.assign_teachers_and_classrooms()
            self.on_schedule_generated()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            self.progress.hide()
            self.statusBar.showMessage("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    def assign_subjects_to_groups(self):
        if not self.subjects or not self.groups:
            return
        for group in self.groups:
            group_subjects = [s for s in self.subjects if s.get('group_type') in [group['type'], '–æ–±—â–∏–π']]
            for subject in group_subjects:
                hours_per_week = subject.get('hours_per_week', 0)
                if hours_per_week <= 0:
                    continue
                free_slots = self.schedule[
                    (self.schedule['group_id'] == group['id']) &
                    (self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ')
                ].index
                if len(free_slots) >= hours_per_week:
                    selected_slots = random.sample(list(free_slots), hours_per_week)
                    for slot in selected_slots:
                        self.schedule.loc[slot, 'subject_id'] = subject['id']
                        self.schedule.loc[slot, 'subject_name'] = subject['name']
                        self.schedule.loc[slot, 'status'] = '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
    def assign_teachers_and_classrooms(self):
        for idx, lesson in self.schedule.iterrows():
            if lesson['status'] == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                subject = next((s for s in self.subjects if s['id'] == lesson['subject_id']), None)
                if subject:
                    available_teachers = [t for t in self.teachers if subject['name'] in t['subjects']]
                    if available_teachers:
                        teacher = random.choice(available_teachers)
                        self.schedule.loc[idx, 'teacher_id'] = teacher['id']
                        self.schedule.loc[idx, 'teacher_name'] = teacher['name']
                        if self.classrooms:
                            classroom = random.choice(self.classrooms)
                            self.schedule.loc[idx, 'classroom_id'] = classroom['id']
                            self.schedule.loc[idx, 'classroom_name'] = classroom['name']
                        self.schedule.loc[idx, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
    def on_schedule_generated(self):
        self.progress.hide()
        self.statusBar.showMessage("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        self.filter_schedule()
        self.update_reports()
        self.create_backup()
    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
    def filter_schedule(self):
        # –û—á–∏—Å—Ç–∫–∞ –º–æ–¥–µ–ª–∏
        self.schedule_model.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–Ω–æ–≤–∞
        self.schedule_model.setHorizontalHeaderLabels(['–í—Ä–µ–º—è', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
        
        week_text = self.week_var.currentText()
        week_num = int(week_text.split()[1]) if week_text and "–ù–µ–¥–µ–ª—è" in week_text else 1
        group_name = self.group_filter_var.currentText()
        teacher_name = self.teacher_filter_var.currentText()
        classroom_name = self.classroom_filter_var.currentText()
        
        filtered_schedule = self.schedule.copy()
        if not filtered_schedule.empty and 'week' in filtered_schedule.columns:
            if week_num:
                filtered_schedule = filtered_schedule[filtered_schedule['week'] == week_num]
            if group_name:
                filtered_schedule = filtered_schedule[filtered_schedule['group_name'] == group_name]
            if teacher_name:
                filtered_schedule = filtered_schedule[filtered_schedule['teacher_name'] == teacher_name]
            if classroom_name:
                filtered_schedule = filtered_schedule[filtered_schedule['classroom_name'] == classroom_name]
            
            if not filtered_schedule.empty:
                days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
                times = sorted(filtered_schedule['time'].unique())
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É
                for time_slot in times:
                    time_item = QStandardItem(time_slot)
                    self.schedule_model.appendRow([time_item])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                    for col, day in enumerate(days, 1):
                        lesson = filtered_schedule[
                            (filtered_schedule['time'] == time_slot) &
                            (filtered_schedule['day'] == day) &
                            (filtered_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                        ]
                        if not lesson.empty:
                            lesson_info = lesson.iloc[0]
                            text = f"{lesson_info['group_name']}\n{lesson_info['subject_name']}\n{lesson_info['teacher_name']}\n{lesson_info['classroom_name']}"
                            item = QStandardItem(text)
                            item.setTextAlignment(Qt.AlignCenter)
                            self.schedule_model.setItem(self.schedule_model.rowCount()-1, col, item)
            else:
                self.show_empty_schedule()
        else:
            self.show_empty_schedule()

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.schedule_proxy_model.sort(0, Qt.AscendingOrder)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É (–≤—Ä–µ–º–µ–Ω–∏)

    def show_empty_schedule(self):
        # –û—á–∏—Å—Ç–∫–∞ –º–æ–¥–µ–ª–∏
        self.schedule_model.clear()
        self.schedule_model.setHorizontalHeaderLabels(['–í—Ä–µ–º—è', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'])
        
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        
        for time_slot in times:
            row_items = [QStandardItem(time_slot)]
            for _ in range(len(days)):
                row_items.append(QStandardItem(""))
            self.schedule_model.appendRow(row_items)
    # --- –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è–º–∏ ---
    def add_lesson(self):
        if not self.groups or not self.subjects or not self.teachers or not self.classrooms:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞, –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç, –æ–¥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –æ–¥–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è.")
            return
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
        dialog.setModal(True)
        dialog.resize(500, 400)
        form_layout = QFormLayout(dialog)
        week_var = QComboBox()
        week_var.addItems([str(i) for i in range(1, self.settings['weeks'] + 1)])
        day_var = QComboBox()
        day_var.addItems(['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']])
        time_var = QComboBox()
        time_var.addItems([f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])])
        group_var = QComboBox()
        group_var.addItems([g['name'] for g in self.groups])
        subject_var = QComboBox()
        subject_var.addItems([s['name'] for s in self.subjects])
        teacher_var = QComboBox()
        teacher_var.addItems([t['name'] for t in self.teachers])
        classroom_var = QComboBox()
        classroom_var.addItems([c['name'] for c in self.classrooms])
        form_layout.addRow("–ù–µ–¥–µ–ª—è:", week_var)
        form_layout.addRow("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", day_var)
        form_layout.addRow("–í—Ä–µ–º—è:", time_var)
        form_layout.addRow("–ì—Ä—É–ø–ø–∞:", group_var)
        form_layout.addRow("–ü—Ä–µ–¥–º–µ—Ç:", subject_var)
        form_layout.addRow("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:", teacher_var)
        form_layout.addRow("–ê—É–¥–∏—Ç–æ—Ä–∏—è:", classroom_var)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_lesson(
            week_var.currentText(), day_var.currentText(), time_var.currentText(),
            group_var.currentText(), subject_var.currentText(), teacher_var.currentText(),
            classroom_var.currentText(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_lesson(self, week, day, time, group_name, subject_name, teacher_name, classroom_name, dialog):
        selected_group = next((g for g in self.groups if g['name'] == group_name), None)
        selected_subject = next((s for s in self.subjects if s['name'] == subject_name), None)
        selected_teacher = next((t for t in self.teachers if t['name'] == teacher_name), None)
        selected_classroom = next((c for c in self.classrooms if c['name'] == classroom_name), None)
        if not all([selected_group, selected_subject, selected_teacher, selected_classroom]):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        existing_lesson = self.schedule[
            (self.schedule['week'] == int(week)) &
            (self.schedule['day'] == day) &
            (self.schedule['time'] == time) &
            (self.schedule['group_id'] == selected_group['id']) &
            (self.schedule['status'] != '—Å–≤–æ–±–æ–¥–Ω–æ')
        ]
        if not existing_lesson.empty:
            if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —É–∂–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–µ. –ó–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?") != QMessageBox.Yes:
                return
        target_row = self.schedule[
            (self.schedule['week'] == int(week)) &
            (self.schedule['day'] == day) &
            (self.schedule['time'] == time) &
            (self.schedule['group_id'] == selected_group['id'])
        ]
        if not target_row.empty:
            idx = target_row.index[0]
            self.schedule.loc[idx, 'subject_id'] = selected_subject['id']
            self.schedule.loc[idx, 'subject_name'] = selected_subject['name']
            self.schedule.loc[idx, 'teacher_id'] = selected_teacher['id']
            self.schedule.loc[idx, 'teacher_name'] = selected_teacher['name']
            self.schedule.loc[idx, 'classroom_id'] = selected_classroom['id']
            self.schedule.loc[idx, 'classroom_name'] = selected_classroom['name']
            self.schedule.loc[idx, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
            self.filter_schedule()
            self.update_reports()
            self.create_backup()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            dialog.accept()
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
    def edit_lesson(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ."""
        selected_indexes = self.schedule_view.selectionModel().selectedIndexes()
        if not selected_indexes:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        selected_index = selected_indexes[0]
        row = selected_index.row()
        col = selected_index.column()
        
        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (0) - —ç—Ç–æ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–Ω, —Ç–æ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.
        if col == 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É —Å –∑–∞–Ω—è—Ç–∏–µ–º (–Ω–µ –≤—Ä–µ–º—è)")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏
        time_index = self.schedule_proxy_model.index(row, 0)
        time_slot = self.schedule_proxy_model.data(time_index)
        if not time_slot:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞
        day_header = self.schedule_proxy_model.headerData(col, Qt.Horizontal, Qt.DisplayRole)
        if not day_header:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
            return
        selected_day = day_header.text().strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        week_text = self.week_var.currentText()
        try:
            selected_week = int(week_text.split()[1]) if "–ù–µ–¥–µ–ª—è" in week_text else 1
        except (ValueError, IndexError):
            selected_week = 1
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        target_lesson = self.schedule[
            (self.schedule['week'] == selected_week) &
            (self.schedule['day'] == selected_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]
        if target_lesson.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_info = target_lesson.iloc[0]
        confirm_text = (
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {lesson_info['subject_name']}\n"
            f"–ì—Ä—É–ø–ø–∞: {lesson_info['group_name']}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson_info['teacher_name']}\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson_info['classroom_name']}\n"
            f"–î–µ–Ω—å: {selected_day}\n"
            f"–í—Ä–µ–º—è: {time_slot}\n"
            f"–ù–µ–¥–µ–ª—è: {selected_week}"
        )
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", confirm_text) != QMessageBox.Yes:
            return
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        
    def delete_lesson(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
        selected_indexes = self.schedule_view.selectionModel().selectedIndexes()
        if not selected_indexes:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        selected_index = selected_indexes[0]
        row = selected_index.row()
        col = selected_index.column()

        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (0) - —ç—Ç–æ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–Ω, —Ç–æ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.
        if col == 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É —Å –∑–∞–Ω—è—Ç–∏–µ–º (–Ω–µ –≤—Ä–µ–º—è)")
            return

        # –ü–û–õ–£–ß–ê–ï–ú –°–û–î–ï–†–ñ–ò–ú–û–ï –í–´–ë–†–ê–ù–ù–û–ô –Ø–ß–ï–ô–ö–ò
        cell_data = self.schedule_proxy_model.data(selected_index)
        if not cell_data or not cell_data.strip():
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞. –ù–µ—Ç –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-–º–æ–¥–µ–ª—å
        time_index = self.schedule_proxy_model.index(row, 0)
        time_slot = self.schedule_proxy_model.data(time_index)
        if not time_slot:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
            return

        # >>> –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏–∑ –º–æ–¥–µ–ª–∏ <<<
        day_header = self.schedule_proxy_model.headerData(col, Qt.Horizontal, Qt.DisplayRole)
        if not day_header:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
            return
        selected_day = day_header.strip()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        week_text = self.week_var.currentText()
        try:
            selected_week = int(week_text.split()[1]) if "–ù–µ–¥–µ–ª—è" in week_text else 1
        except (ValueError, IndexError):
            selected_week = 1

        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        target_lesson = self.schedule[
            (self.schedule['week'] == selected_week) &
            (self.schedule['day'] == selected_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]
        if target_lesson.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        lesson_info = target_lesson.iloc[0]
        confirm_text = (
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {lesson_info['subject_name']}\n"
            f"–ì—Ä—É–ø–ø–∞: {lesson_info['group_name']}\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson_info['teacher_name']}\n"
            f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson_info['classroom_name']}\n"
            f"–î–µ–Ω—å: {selected_day}\n"
            f"–í—Ä–µ–º—è: {time_slot}\n"
            f"–ù–µ–¥–µ–ª—è: {selected_week}"
        )
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", confirm_text) != QMessageBox.Yes:
            return

        # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å '—Å–≤–æ–±–æ–¥–Ω–æ'
        idx = target_lesson.index[0]
        self.schedule.loc[idx, ['subject_id', 'subject_name', 'teacher_id', 'teacher_name', 'classroom_id', 'classroom_name']] = [None, '', None, '', None, '']
        self.schedule.loc[idx, 'status'] = '—Å–≤–æ–±–æ–¥–Ω–æ'
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Ç—á–µ—Ç—ã
        self.filter_schedule()
        self.update_reports()
        self.create_backup()
        QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    
    def substitute_lesson(self):
        """–ó–∞–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ."""
        selected_indexes = self.schedule_view.selectionModel().selectedIndexes()
        if not selected_indexes:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏
        selected_index = selected_indexes[0]
        row = selected_index.row()
        col = selected_index.column()

        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (0) - —ç—Ç–æ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–Ω, —Ç–æ –∑–∞–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.
        if col == 0:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É —Å –∑–∞–Ω—è—Ç–∏–µ–º (–Ω–µ –≤—Ä–µ–º—è)")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-–º–æ–¥–µ–ª—å
        time_index = self.schedule_proxy_model.index(row, 0)
        time_slot = self.schedule_proxy_model.data(time_index)
        if not time_slot:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–æ–ª–±—Ü–∞
        day_header = self.schedule_view.horizontalHeaderItem(col)
        if not day_header:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
            return
        selected_day = day_header.text().strip()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
        week_text = self.week_var.currentText()
        try:
            selected_week = int(week_text.split()[1]) if "–ù–µ–¥–µ–ª—è" in week_text else 1
        except (ValueError, IndexError):
            selected_week = 1

        # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
        target_lesson = self.schedule[
            (self.schedule['week'] == selected_week) &
            (self.schedule['day'] == selected_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]

        if target_lesson.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        lesson_info = target_lesson.iloc[0]

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        dialog = QDialog(self)
        dialog.setWindowTitle("–ó–∞–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è")
        dialog.setModal(True)
        dialog.resize(400, 200)
        layout = QVBoxLayout(dialog)

        info_label = QLabel(f"–ó–∞–º–µ–Ω–∞ –¥–ª—è:\n{lesson_info['subject_name']}\n–ì—Ä—É–ø–ø–∞: {lesson_info['group_name']}\n–î–µ–Ω—å: {selected_day}\n–í—Ä–µ–º—è: {time_slot}")
        info_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(info_label)

        teacher_label = QLabel("–ù–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:")
        layout.addWidget(teacher_label)

        teacher_combo = QComboBox()
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç
        available_teachers = [t for t in self.teachers if lesson_info['subject_name'] in t['subjects']]
        teacher_names = [t['name'] for t in available_teachers]
        teacher_combo.addItems(teacher_names)
        layout.addWidget(teacher_combo)

        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(dialog.accept)
        button_box.rejected.connect(dialog.reject)
        layout.addWidget(button_box)

        if dialog.exec_() == QDialog.Accepted:
            new_teacher_name = teacher_combo.currentText()
            new_teacher = next((t for t in available_teachers if t['name'] == new_teacher_name), None)

            if new_teacher:
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
                idx = target_lesson.index[0]
                self.schedule.loc[idx, 'teacher_id'] = new_teacher['id']
                self.schedule.loc[idx, 'teacher_name'] = new_teacher['name']

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∂—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω (–µ—Å–ª–∏ –æ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
                self.substitutions.append({
                    'date': datetime.now().isoformat(),
                    'week': selected_week,
                    'day': selected_day,
                    'time': time_slot,
                    'group': lesson_info['group_name'],
                    'subject': lesson_info['subject_name'],
                    'old_teacher': lesson_info['teacher_name'],
                    'new_teacher': new_teacher_name
                })

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Ç—á–µ—Ç—ã
                self.filter_schedule()
                self.update_reports()
                self.create_backup()

                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!\n–ù–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {new_teacher_name}")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é –∏–∑ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏.
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ Qt-–≤–µ—Ä—Å–∏–∏.")
        
    # --- –ó–∞–º–µ–Ω—ã ---
    def substitute_lesson(self):
        selected_items = self.schedule_view.selectionModel().selectedIndexes()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        row = selected_items[0].row()
        time_slot = self.schedule_proxy_model.data(self.schedule_proxy_model.index(row, 0))
        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—é –∏–∑ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏.
        # –ü–æ—ç—Ç–æ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ó–∞–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ Qt-–≤–µ—Ä—Å–∏–∏.")
    # --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å ---
    def show_calendar(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        dialog.setModal(True)
        dialog.resize(600, 500)
        layout = QVBoxLayout(dialog)
        calendar = QCalendarWidget()
        layout.addWidget(calendar)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok)
        button_box.accepted.connect(dialog.accept)
        layout.addWidget(button_box)
        dialog.exec_()
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ ---
    def check_conflicts(self):
        if self.schedule.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        teacher_conflicts = pd.DataFrame()
        classroom_conflicts = pd.DataFrame()
        group_conflicts = pd.DataFrame()
        if 'teacher_id' in self.schedule.columns:
            teacher_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['teacher_id', 'day', 'time', 'week'], keep=False))
            ]
        if 'classroom_id' in self.schedule.columns:
            classroom_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['classroom_id', 'day', 'time', 'week'], keep=False))
            ]
        if 'group_id' in self.schedule.columns:
            group_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['group_id', 'day', 'time', 'week'], keep=False))
            ]
        conflict_text = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teacher_conflicts)}\n"
        conflict_text += f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–π: {len(classroom_conflicts)}\n"
        conflict_text += f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≥—Ä—É–ø–ø: {len(group_conflicts)}\n"
        if not teacher_conflicts.empty:
            conflict_text += "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n"
            for _, conflict in teacher_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['teacher_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        if not classroom_conflicts.empty:
            conflict_text += "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–π:\n"
            for _, conflict in classroom_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['classroom_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        if not group_conflicts.empty:
            conflict_text += "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≥—Ä—É–ø–ø:\n"
            for _, conflict in group_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['group_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        self.conflicts_text.setText(conflict_text)
        QMessageBox.information(self, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤", f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teacher_conflicts)}\n–ê—É–¥–∏—Ç–æ—Ä–∏–π: {len(classroom_conflicts)}\n–ì—Ä—É–ø–ø: {len(group_conflicts)}")
    # --- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ---
    def optimize_schedule(self):
        if self.schedule.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        self.progress.show()
        self.statusBar.showMessage("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        conflicts = pd.DataFrame()
        if 'teacher_id' in self.schedule.columns:
            conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['teacher_id', 'day', 'time', 'week'], keep=False))
            ]
        optimized_count = 0
        for idx in conflicts.index[:10]:
            group_id = self.schedule.loc[idx, 'group_id']
            week = self.schedule.loc[idx, 'week']
            free_slots = self.schedule[
                (self.schedule['group_id'] == group_id) &
                (self.schedule['week'] == week) &
                (self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ')
            ].index
            if len(free_slots) > 0:
                new_slot = random.choice(free_slots)
                self.schedule.loc[new_slot, 'subject_id'] = self.schedule.loc[idx, 'subject_id']
                self.schedule.loc[new_slot, 'subject_name'] = self.schedule.loc[idx, 'subject_name']
                self.schedule.loc[new_slot, 'teacher_id'] = self.schedule.loc[idx, 'teacher_id']
                self.schedule.loc[new_slot, 'teacher_name'] = self.schedule.loc[idx, 'teacher_name']
                self.schedule.loc[new_slot, 'classroom_id'] = self.schedule.loc[idx, 'classroom_id']
                self.schedule.loc[new_slot, 'classroom_name'] = self.schedule.loc[idx, 'classroom_name']
                self.schedule.loc[new_slot, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                self.schedule.loc[idx, ['subject_id', 'subject_name', 'teacher_id', 'teacher_name', 'classroom_id', 'classroom_name']] = [None, '', None, '', None, '']
                self.schedule.loc[idx, 'status'] = '—Å–≤–æ–±–æ–¥–Ω–æ'
                optimized_count += 1
        self.progress.hide()
        self.statusBar.showMessage("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        QMessageBox.information(self, "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {optimized_count} –∑–∞–Ω—è—Ç–∏–π")
        self.filter_schedule()
        self.update_reports()
        self.create_backup()
    # --- –û—Ç—á–µ—Ç—ã ---
    def update_reports(self):
        if self.schedule.empty:
            return
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        self.teacher_report_tree.setRowCount(0)
        self.group_report_tree.setRowCount(0)
        self.summary_text.clear()
        # –ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if 'teacher_name' in self.schedule.columns and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
            teacher_load = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size()
            for teacher, hours in teacher_load.items():
                teacher_data = self.schedule[
                    (self.schedule['teacher_name'] == teacher) &
                    (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                ]
                groups = ', '.join(teacher_data['group_name'].unique())
                subjects = ', '.join(teacher_data['subject_name'].unique())
                row = self.teacher_report_tree.rowCount()
                self.teacher_report_tree.insertRow(row)
                self.teacher_report_tree.setItem(row, 0, QTableWidgetItem(teacher))
                self.teacher_report_tree.setItem(row, 1, QTableWidgetItem(str(hours)))
                self.teacher_report_tree.setItem(row, 2, QTableWidgetItem(groups))
                self.teacher_report_tree.setItem(row, 3, QTableWidgetItem(subjects))
        # –ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø
        if 'group_name' in self.schedule.columns and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
            group_load = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size()
            for group, hours in group_load.items():
                group_data = self.schedule[
                    (self.schedule['group_name'] == group) &
                    (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                ]
                subjects = ', '.join(group_data['subject_name'].unique())
                teachers = ', '.join(group_data['teacher_name'].unique())
                row = self.group_report_tree.rowCount()
                self.group_report_tree.insertRow(row)
                self.group_report_tree.setItem(row, 0, QTableWidgetItem(group))
                self.group_report_tree.setItem(row, 1, QTableWidgetItem(str(hours)))
                self.group_report_tree.setItem(row, 2, QTableWidgetItem(subjects))
                self.group_report_tree.setItem(row, 3, QTableWidgetItem(teachers))
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary_text = f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        summary_text += f"–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {self.settings.get('school_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {self.settings.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {self.settings.get('weeks', 0)} –Ω–µ–¥–µ–ª—å\n"
        summary_text += f"üìÖ –î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {self.settings.get('days_per_week', 0)}\n"
        summary_text += f"üìÖ –ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å: {self.settings.get('lessons_per_day', 0)}\n"
        summary_text += f"üë• –ì—Ä—É–ø–ø: {len(self.groups)}\n"
        summary_text += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(self.teachers)}\n"
        summary_text += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–π: {len(self.classrooms)}\n"
        summary_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.subjects)}\n"
        summary_text += f"üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π: {len(self.holidays)}\n"
        if not self.schedule.empty:
            confirmed_lessons = len(self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'])
            planned_lessons = len(self.schedule[self.schedule['status'] == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'])
            free_slots = len(self.schedule[self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ'])
            summary_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {confirmed_lessons}\n"
            summary_text += f"üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {planned_lessons}\n"
            summary_text += f"üïí –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}\n"
        self.summary_text.setText(summary_text)
    def show_reports(self):
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç—á–µ—Ç–æ–≤
        self.notebook.setCurrentIndex(5) # –ò–Ω–¥–µ–∫—Å –≤–∫–ª–∞–¥–∫–∏ "–û—Ç—á–µ—Ç—ã"
        self.update_reports()
    # --- –≠–∫—Å–ø–æ—Ä—Ç ---
    def export_to_excel(self):
        if self.schedule.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        filename, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫", "", "Excel files (*.xlsx);;All files (*.*)")
        if not filename:
            return
        try:
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                if not self.schedule.empty:
                    confirmed_schedule = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ']
                    if not confirmed_schedule.empty:
                        confirmed_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                    else:
                        self.schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                else:
                    pd.DataFrame(columns=['id', 'week', 'day', 'time', 'group_id', 'group_name',
                                        'subject_id', 'subject_name', 'teacher_id', 'teacher_name',
                                        'classroom_id', 'classroom_name', 'status']).to_excel(
                        writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                pd.DataFrame(self.groups).to_excel(writer, sheet_name='–ì—Ä—É–ø–ø—ã', index=False)
                pd.DataFrame(self.teachers).to_excel(writer, sheet_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', index=False)
                pd.DataFrame(self.classrooms).to_excel(writer, sheet_name='–ê—É–¥–∏—Ç–æ—Ä–∏–∏', index=False)
                pd.DataFrame(self.subjects).to_excel(writer, sheet_name='–ü—Ä–µ–¥–º–µ—Ç—ã', index=False)
                pd.DataFrame(self.holidays).to_excel(writer, sheet_name='–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', index=False)
                if not self.schedule.empty and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
                    teacher_report = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').agg({
                        'group_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    teacher_report.columns = ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    teacher_report['–ß–∞—Å—ã'] = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size().values
                    teacher_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π', index=False)
                    group_report = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').agg({
                        'teacher_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    group_report.columns = ['–ì—Ä—É–ø–ø–∞', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    group_report['–ß–∞—Å—ã'] = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size().values
                    group_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø', index=False)
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {filename}")
            self.create_backup()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    def export_to_html(self):
        if self.schedule.empty:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        filename, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ HTML", "", "HTML files (*.html);;All files (*.*)")
        if not filename:
            return
        try:
            confirmed_schedule = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ']
            if confirmed_schedule.empty:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return
            unique_groups = confirmed_schedule['group_name'].unique()
            unique_groups.sort()
            html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π - {self.settings.get('school_name', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
        }}
        .header p {{
            margin: 10px 0 0;
            font-size: 1.2em;
        }}
        .info {{
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }}
        .schedule-container {{
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            justify-content: center;
        }}
        .schedule-table {{
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
            flex: 1 1 450px;
            min-width: 300px;
        }}
        .schedule-title {{
            background-color: #2c3e50;
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
            font-size: 1.3em;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
        }}
        th, td {{
            padding: 12px;
            text-align: center;
            border: 1px solid #e0e0e0;
        }}
        th {{
            background-color: #34495e;
            color: white;
            font-weight: bold;
        }}
        tr:nth-child(even) {{
            background-color: #f8f9fa;
        }}
        tr:hover {{
            background-color: #e3f2fd;
        }}
        .lesson-info {{
            font-size: 0.9em;
        }}
        .no-lesson {{
            color: #95a5a6;
            font-style: italic;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #7f8c8d;
            font-size: 0.9em;
            border-top: 1px solid #ecf0f1;
        }}
        @media (max-width: 768px) {{
            .schedule-container {{
                flex-direction: column;
            }}
            body {{
                padding: 10px;
            }}
            .header h1 {{
                font-size: 2em;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h1>
        <p>{self.settings.get('school_name', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}</p>
        <p>–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
    </div>
    <div class="info">
        <p><strong>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:</strong> {len(unique_groups)}</p>
        <p><strong>–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</strong> {self.settings.get('weeks', 0)} –Ω–µ–¥–µ–ª—å</p>
        <p><strong>–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:</strong> {self.settings.get('days_per_week', 0)}</p>
        <p><strong>–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:</strong> {self.settings.get('lessons_per_day', 0)}</p>
    </div>
    <div class="schedule-container">
"""
            for group_name in unique_groups:
                group_schedule = confirmed_schedule[confirmed_schedule['group_name'] == group_name]
                days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
                times = sorted(group_schedule['time'].unique())
                html_content += f"""
        <div class="schedule-table">
            <div class="schedule-title">–ì—Ä—É–ø–ø–∞: {group_name}</div>
            <table>
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        {''.join(f'<th>{day}</th>' for day in days)}
                    </tr>
                </thead>
                <tbody>
"""
                for time_slot in times:
                    html_content += f"                    <tr>\n                        <td><strong>{time_slot}</strong></td>\n"
                    for day in days:
                        lesson = group_schedule[
                            (group_schedule['time'] == time_slot) &
                            (group_schedule['day'] == day)
                        ]
                        if not lesson.empty:
                            lesson_info = lesson.iloc[0]
                            lesson_html = f"{lesson_info['subject_name']}<br><span class='lesson-info'>{lesson_info['teacher_name']}<br>{lesson_info['classroom_name']}</span>"
                        else:
                            lesson_html = "<span class='no-lesson'>‚Äî</span>"
                        html_content += f"                        <td>{lesson_html}</td>\n"
                    html_content += "                    </tr>\n"
                html_content += """                </tbody>
            </table>
        </div>
"""
            html_content += f"""
    </div>
    <div class="footer">
        <p>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
        <p>–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
    </div>
</body>
</html>
"""
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ HTML-—Ñ–∞–π–ª:\n{filename}")
            self.create_backup()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ HTML: {str(e)}")
    # --- –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ ---
    def add_holiday(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
        dialog.setModal(True)
        dialog.resize(400, 200)
        form_layout = QFormLayout(dialog)
        date_entry = QDateEdit()
        date_entry.setCalendarPopup(True)
        date_entry.setDate(datetime.now().date())
        name_entry = QLineEdit()
        type_combo = QComboBox()
        type_combo.addItems(["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π", "–£—á–µ–±–Ω—ã–π", "–ö–∞–Ω–∏–∫—É–ª—ã"])
        form_layout.addRow("–î–∞—Ç–∞:", date_entry)
        form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", name_entry)
        form_layout.addRow("–¢–∏–ø:", type_combo)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_holiday(date_entry.date().toString("yyyy-MM-dd"), name_entry.text(), type_combo.currentText(), dialog))
        button_box.rejected.connect(dialog.reject)
        form_layout.addRow(button_box)
        dialog.exec_()
    def _save_holiday(self, date_str, name, holiday_type, dialog):
        if not date_str or not name:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return
        try:
            datetime.strptime(date_str, '%Y-%m-%d')
            self.holidays.append({
                'date': date_str,
                'name': name,
                'type': holiday_type
            })
            self.load_holidays_data()
            self.create_backup()
            dialog.accept()
        except ValueError:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
    def delete_holiday(self):
        selected_items = self.holidays_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫?") == QMessageBox.Yes:
            row = selected_items[0].row()
            holiday_date = self.holidays_tree.item(row, 0).text()
            holiday_name = self.holidays_tree.item(row, 1).text()
            self.holidays = [h for h in self.holidays if not (h['date'] == holiday_date and h['name'] == holiday_name)]
            self.load_holidays_data()
            self.create_backup()
    # --- –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ---
    def save_current_schedule(self):
        if self.schedule.empty:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.")
            return
        school_name = self.settings.get('school_name', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ').replace(" ", "_")
        academic_year = self.settings.get('academic_year', '–ì–æ–¥_–Ω–µ_—É–∫–∞–∑–∞–Ω').replace("/", "_")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{school_name}_{academic_year}_{timestamp}.json"
        filepath = os.path.join(self.archive_dir, filename)
        try:
            schedule_dict = self.schedule.to_dict(orient='records') if not self.schedule.empty else []
            archive_data = {
                'settings': self.settings,
                'groups': self.groups,
                'teachers': self.teachers,
                'classrooms': self.classrooms,
                'subjects': self.subjects,
                'schedule': schedule_dict,
                'holidays': self.holidays,
                'substitutions': self.substitutions,
                'saved_at': datetime.now().isoformat()
            }
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(archive_data, f, ensure_ascii=False, indent=2)
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤!\n–§–∞–π–ª: {filename}")
            self.load_archive_list()
            self.create_backup()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤: {str(e)}")
    def load_archive_list(self):
        self.archive_tree.setRowCount(0)
        try:
            archive_files = [f for f in os.listdir(self.archive_dir) if f.endswith('.json')]
            archive_files.sort(key=lambda x: os.path.getmtime(os.path.join(self.archive_dir, x)), reverse=True)
            for filename in archive_files:
                filepath = os.path.join(self.archive_dir, filename)
                stat = os.stat(filepath)
                creation_time = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    groups_count = len(data.get('groups', []))
                    teachers_count = len(data.get('teachers', []))
                    classrooms_count = len(data.get('classrooms', []))
                    subjects_count = len(data.get('subjects', []))
                    schedule = data.get('schedule', [])
                    lessons_count = len([s for s in schedule if s.get('status') == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'])
                    row = self.archive_tree.rowCount()
                    self.archive_tree.insertRow(row)
                    self.archive_tree.setItem(row, 0, QTableWidgetItem(filename))
                    self.archive_tree.setItem(row, 1, QTableWidgetItem(creation_time))
                    self.archive_tree.setItem(row, 2, QTableWidgetItem(str(groups_count)))
                    self.archive_tree.setItem(row, 3, QTableWidgetItem(str(teachers_count)))
                    self.archive_tree.setItem(row, 4, QTableWidgetItem(str(classrooms_count)))
                    self.archive_tree.setItem(row, 5, QTableWidgetItem(str(subjects_count)))
                    self.archive_tree.setItem(row, 6, QTableWidgetItem(str(lessons_count)))
                except Exception as e:
                    row = self.archive_tree.rowCount()
                    self.archive_tree.insertRow(row)
                    self.archive_tree.setItem(row, 0, QTableWidgetItem(filename))
                    self.archive_tree.setItem(row, 1, QTableWidgetItem(creation_time))
                    self.archive_tree.setItem(row, 2, QTableWidgetItem("–û—à–∏–±–∫–∞"))
                    self.archive_tree.setItem(row, 3, QTableWidgetItem("–û—à–∏–±–∫–∞"))
                    self.archive_tree.setItem(row, 4, QTableWidgetItem("–û—à–∏–±–∫–∞"))
                    self.archive_tree.setItem(row, 5, QTableWidgetItem("–û—à–∏–±–∫–∞"))
                    self.archive_tree.setItem(row, 6, QTableWidgetItem("–û—à–∏–±–∫–∞"))
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–∞: {e}")
    def load_archived_schedule(self):
        selected_items = self.archive_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        row = selected_items[0].row()
        filename = self.archive_tree.item(row, 0).text()
        filepath = os.path.join(self.archive_dir, filename)
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ {filename}?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.") == QMessageBox.Yes:
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.settings = data.get('settings', self.settings)
                self.groups = data.get('groups', [])
                self.teachers = data.get('teachers', [])
                self.classrooms = data.get('classrooms', [])
                self.subjects = data.get('subjects', [])
                self.holidays = data.get('holidays', [])
                self.substitutions = data.get('substitutions', [])
                schedule_data = data.get('schedule', [])
                if schedule_data:
                    self.schedule = pd.DataFrame(schedule_data)
                else:
                    self.schedule = pd.DataFrame()
                self.load_groups_data()
                self.load_teachers_data()
                self.load_classrooms_data()
                self.load_subjects_data()
                self.load_holidays_data()
                self.filter_schedule()
                self.update_reports()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {filename}")
                self.create_backup()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
    def delete_archived_schedule(self):
        selected_items = self.archive_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        row = selected_items[0].row()
        filename = self.archive_tree.item(row, 0).text()
        filepath = os.path.join(self.archive_dir, filename)
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}?") == QMessageBox.Yes:
            try:
                os.remove(filepath)
                self.load_archive_list()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
    def export_archived_schedule(self):
        selected_items = self.archive_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        row = selected_items[0].row()
        filename = self.archive_tree.item(row, 0).text()
        filepath = os.path.join(self.archive_dir, filename)
        save_path, _ = QFileDialog.getSaveFileName(self, f"–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {filename}", "", "Excel files (*.xlsx);;All files (*.*)")
        if not save_path:
            return
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            schedule_data = data.get('schedule', [])
            if not schedule_data:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return
            archive_schedule = pd.DataFrame(schedule_data)
            with pd.ExcelWriter(save_path, engine='openpyxl') as writer:
                confirmed_schedule = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'] if not archive_schedule.empty else archive_schedule
                if not confirmed_schedule.empty:
                    confirmed_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                else:
                    archive_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                pd.DataFrame(data.get('groups', [])).to_excel(writer, sheet_name='–ì—Ä—É–ø–ø—ã', index=False)
                pd.DataFrame(data.get('teachers', [])).to_excel(writer, sheet_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', index=False)
                pd.DataFrame(data.get('classrooms', [])).to_excel(writer, sheet_name='–ê—É–¥–∏—Ç–æ—Ä–∏–∏', index=False)
                pd.DataFrame(data.get('subjects', [])).to_excel(writer, sheet_name='–ü—Ä–µ–¥–º–µ—Ç—ã', index=False)
                pd.DataFrame(data.get('holidays', [])).to_excel(writer, sheet_name='–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', index=False)
                if not archive_schedule.empty and not archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
                    teacher_report = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').agg({
                        'group_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    teacher_report.columns = ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    teacher_report['–ß–∞—Å—ã'] = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size().values
                    teacher_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π', index=False)
                    group_report = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').agg({
                        'teacher_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    group_report.columns = ['–ì—Ä—É–ø–ø–∞', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    group_report['–ß–∞—Å—ã'] = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size().values
                    group_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø', index=False)
            QMessageBox.information(self, "–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {save_path}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
    def open_settings(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        dialog.setModal(True)
        dialog.resize(550, 700)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        basic_frame = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        basic_layout = QFormLayout(basic_frame)
        school_name_var = QLineEdit(self.settings.get('school_name', ''))
        director_var = QLineEdit(self.settings.get('director', ''))
        academic_year_var = QLineEdit(self.settings.get('academic_year', ''))
        start_date_var = QLineEdit(self.settings.get('start_date', datetime.now().date().isoformat()))
        basic_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:", school_name_var)
        basic_layout.addRow("–î–∏—Ä–µ–∫—Ç–æ—Ä:", director_var)
        basic_layout.addRow("–£—á–µ–±–Ω—ã–π –≥–æ–¥:", academic_year_var)
        basic_layout.addRow("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞:", start_date_var)
        scroll_layout.addWidget(basic_frame)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_frame = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        schedule_layout = QFormLayout(schedule_frame)
        days_per_week_var = QSpinBox()
        days_per_week_var.setRange(1, 7)
        days_per_week_var.setValue(self.settings.get('days_per_week', 5))
        lessons_per_day_var = QSpinBox()
        lessons_per_day_var.setRange(1, 12)
        lessons_per_day_var.setValue(self.settings.get('lessons_per_day', 6))
        weeks_var = QSpinBox()
        weeks_var.setRange(1, 52)
        weeks_var.setValue(self.settings.get('weeks', 2))
        schedule_layout.addRow("–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:", days_per_week_var)
        schedule_layout.addRow("–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:", lessons_per_day_var)
        schedule_layout.addRow("–ù–µ–¥–µ–ª—å:", weeks_var)
        scroll_layout.addWidget(schedule_frame)
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
        bell_frame = QGroupBox("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤")
        bell_layout = QFormLayout(bell_frame)
        bell_schedule_var = QLineEdit(self.settings.get('bell_schedule', '8:00-8:45,8:55-9:40,9:50-10:35,10:45-11:30,11:40-12:25,12:35-13:20'))
        bell_schedule_var.setReadOnly(True)
        bell_layout.addRow("–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:", bell_schedule_var)
        open_editor_btn = QPushButton("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä...")
        bell_layout.addRow(open_editor_btn)
        bell_layout.addRow(QLabel("–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤", font=QFont('Segoe UI', 9, QFont.StyleItalic)))
        scroll_layout.addWidget(bell_frame)
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞
        backup_frame = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞")
        backup_layout = QFormLayout(backup_frame)
        auto_backup_var = QCheckBox()
        auto_backup_var.setChecked(self.settings.get('auto_backup', True))
        backup_interval_var = QSpinBox()
        backup_interval_var.setRange(1, 1440)
        backup_interval_var.setValue(self.settings.get('backup_interval', 30))
        max_backups_var = QSpinBox()
        max_backups_var.setRange(1, 100)
        max_backups_var.setValue(self.settings.get('max_backups', 10))
        backup_layout.addRow("–ê–≤—Ç–æ-–±—ç–∫–∞–ø:", auto_backup_var)
        backup_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª –±—ç–∫–∞–ø–∞ (–º–∏–Ω):", backup_interval_var)
        backup_layout.addRow("–ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤:", max_backups_var)
        scroll_layout.addWidget(backup_frame)
        scroll_area.setWidget(scroll_content)
        main_layout = QVBoxLayout(dialog)
        main_layout.addWidget(scroll_area)
        button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        button_box.accepted.connect(lambda: self._save_settings(
            school_name_var.text(), director_var.text(), academic_year_var.text(), start_date_var.text(),
            days_per_week_var.value(), lessons_per_day_var.value(), weeks_var.value(),
            auto_backup_var.isChecked(), backup_interval_var.value(), max_backups_var.value(),
            bell_schedule_var.text(), dialog))
        button_box.rejected.connect(dialog.reject)
        main_layout.addWidget(button_box)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∑–≤–æ–Ω–∫–æ–≤
        def open_editor_wrapper():
            current_schedule = bell_schedule_var.text()
            editor = BellScheduleEditor(dialog, current_schedule)
            if editor.exec_() == QDialog.Accepted and editor.result is not None:
                bell_schedule_var.setText(editor.result)
        open_editor_btn.clicked.connect(open_editor_wrapper)
        dialog.exec_()
    def _save_settings(self, school_name, director, academic_year, start_date,
                      days_per_week, lessons_per_day, weeks,
                      auto_backup, backup_interval, max_backups,
                      bell_schedule, dialog):
        self.settings['school_name'] = school_name
        self.settings['director'] = director
        self.settings['academic_year'] = academic_year
        self.settings['start_date'] = start_date
        self.settings['days_per_week'] = days_per_week
        self.settings['lessons_per_day'] = lessons_per_day
        self.settings['weeks'] = weeks
        self.settings['auto_backup'] = auto_backup
        self.settings['backup_interval'] = backup_interval
        self.settings['max_backups'] = max_backups
        self.settings['bell_schedule'] = bell_schedule
        self.days_var.setValue(days_per_week)
        self.lessons_var.setValue(lessons_per_day)
        self.weeks_var.setValue(weeks)
        self.restart_auto_backup()
        self.update_backup_indicator()
        dialog.accept()
    # --- –ë—ç–∫–∞–ø—ã ---
    def open_backup_manager(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤")
        dialog.setModal(True)
        dialog.resize(600, 400)
        layout = QVBoxLayout(dialog)
        label = QLabel("üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤")
        label.setFont(QFont('Arial', 14, QFont.Bold))
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        self.backup_tree = QTableWidget(0, 3)
        self.backup_tree.setHorizontalHeaderLabels(['–ò–º—è —Ñ–∞–π–ª–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–†–∞–∑–º–µ—Ä'])
        self.backup_tree.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.backup_tree.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.backup_tree, 1)
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.backup_tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.backup_tree.customContextMenuRequested.connect(self.show_backup_context_menu)
        button_frame = QFrame()
        button_layout = QHBoxLayout(button_frame)
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_backup_list)
        create_btn = QPushButton("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
        create_btn.clicked.connect(self.create_backup)
        restore_btn = QPushButton("üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        restore_btn.clicked.connect(self.restore_backup)
        delete_btn = QPushButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        delete_btn.clicked.connect(self.delete_backup)
        button_layout.addWidget(refresh_btn)
        button_layout.addWidget(create_btn)
        button_layout.addWidget(restore_btn)
        button_layout.addWidget(delete_btn)
        button_layout.addStretch()
        layout.addWidget(button_frame)
        self.load_backup_list()
        dialog.exec_()
    def show_backup_context_menu(self, position):
        menu = QMenu()
        restore_action = QAction("üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self)
        delete_action = QAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", self)
        refresh_action = QAction("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", self)
        menu.addAction(restore_action)
        menu.addAction(delete_action)
        menu.addSeparator()
        menu.addAction(refresh_action)
        action = menu.exec_(self.backup_tree.mapToGlobal(position))
        if action == restore_action:
            self.restore_backup()
        elif action == delete_action:
            self.delete_backup()
        elif action == refresh_action:
            self.load_backup_list()
    def load_backup_list(self):
        self.backup_tree.setRowCount(0)
        try:
            backup_files = [f for f in os.listdir(self.backup_dir) if f.endswith('.zip')]
            backup_files.sort(reverse=True)
            for filename in backup_files:
                filepath = os.path.join(self.backup_dir, filename)
                stat = os.stat(filepath)
                creation_time = datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
                size = stat.st_size
                if size < 1024:
                    size_str = f"{size} B"
                elif size < 1024**2:
                    size_str = f"{size/1024:.1f} KB"
                else:
                    size_str = f"{size/(1024**2):.1f} MB"
                row = self.backup_tree.rowCount()
                self.backup_tree.insertRow(row)
                self.backup_tree.setItem(row, 0, QTableWidgetItem(filename))
                self.backup_tree.setItem(row, 1, QTableWidgetItem(creation_time))
                self.backup_tree.setItem(row, 2, QTableWidgetItem(size_str))
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")
    def restore_backup(self):
        selected_items = self.backup_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        row = selected_items[0].row()
        filename = self.backup_tree.item(row, 0).text()
        filepath = os.path.join(self.backup_dir, filename)
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {filename}?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.") == QMessageBox.Yes:
            try:
                with zipfile.ZipFile(filepath, 'r') as zip_ref:
                    zip_ref.extractall('.')
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {filename}")
                self.load_data()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    def delete_backup(self):
        selected_items = self.backup_tree.selectedItems()
        if not selected_items:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        row = selected_items[0].row()
        filename = self.backup_tree.item(row, 0).text()
        filepath = os.path.join(self.backup_dir, filename)
        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {filename}?") == QMessageBox.Yes:
            try:
                os.remove(filepath)
                self.load_backup_list()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ë—ç–∫–∞–ø {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
    def create_backup(self):
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"backup_{timestamp}.zip"
            backup_filepath = os.path.join(self.backup_dir, backup_filename)
            temp_data_file = "temp_data.json"
            data = {
                'settings': self.settings,
                'groups': self.groups,
                'teachers': self.teachers,
                'classrooms': self.classrooms,
                'subjects': self.subjects,
                'schedule': self.schedule.to_dict() if not self.schedule.empty else {},
                'substitutions': self.substitutions,
                'holidays': self.holidays
            }
            with open(temp_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            with zipfile.ZipFile(backup_filepath, 'w') as zipf:
                zipf.write(temp_data_file)
            os.remove(temp_data_file)
            self.cleanup_old_backups()
            self.last_backup_time = datetime.now()
            self.update_backup_indicator()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")
    def cleanup_old_backups(self):
        try:
            backup_files = [f for f in os.listdir(self.backup_dir) if f.endswith('.zip')]
            backup_files.sort(key=lambda x: os.path.getctime(os.path.join(self.backup_dir, x)))
            while len(backup_files) > self.settings.get('max_backups', 10):
                oldest_file = backup_files.pop(0)
                os.remove(os.path.join(self.backup_dir, oldest_file))
        except Exception as e:
            pass
    def start_auto_backup(self):
        if self.settings.get('auto_backup', True):
            interval = self.settings.get('backup_interval', 30) * 60 * 1000
            self.backup_timer = QTimer()
            self.backup_timer.timeout.connect(self.auto_backup)
            self.backup_timer.start(interval)
    def auto_backup(self):
        self.create_backup()
    def restart_auto_backup(self):
        if self.backup_timer:
            self.backup_timer.stop()
        self.start_auto_backup()
    def update_backup_indicator(self):
        if self.settings.get('auto_backup', True):
            self.backup_status_label.setText("–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–ö–õ")
            self.backup_status_label.setStyleSheet(f"color: {COLORS['success']};")
            if self.last_backup_time:
                next_backup = self.last_backup_time + timedelta(minutes=self.settings.get('backup_interval', 30))
                self.next_backup_time = next_backup
                self.backup_info_label.setText(f"–°–ª–µ–¥—É—é—â–∏–π: {next_backup.strftime('%H:%M')}")
            else:
                self.backup_info_label.setText("–°–ª–µ–¥—É—é—â–∏–π: --:--")
        else:
            self.backup_status_label.setText("–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–´–ö–õ")
            self.backup_status_label.setStyleSheet(f"color: {COLORS['danger']};")
            self.backup_info_label.setText("")
    # --- –ü—Ä–æ—á–µ–µ ---
    def check_and_update_experience(self):
        current_year = datetime.now().year
        last_update_year = self.settings.get('last_academic_year_update', current_year)
        if current_year > last_update_year:
            for teacher in self.teachers:
                teacher['experience'] = teacher.get('experience', 0) + (current_year - last_update_year)
            self.settings['last_academic_year_update'] = current_year
            self.load_teachers_data()
            self.create_backup()
    def find_free_slot(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è")
        dialog.setModal(True)
        dialog.resize(400, 250)
        layout = QVBoxLayout(dialog)
        search_type_var = QComboBox()
        search_type_var.addItems(["–ì—Ä—É–ø–ø–∞", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", "–ê—É–¥–∏—Ç–æ—Ä–∏—è"])
        element_var = QComboBox()
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"))
        layout.addWidget(search_type_var)
        layout.addWidget(QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:"))
        layout.addWidget(element_var)
        def update_combo():
            search_type = search_type_var.currentText()
            if search_type == "–ì—Ä—É–ø–ø–∞":
                values = [g['name'] for g in self.groups]
            elif search_type == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                values = [t['name'] for t in self.teachers]
            else:
                values = [c['name'] for c in self.classrooms]
            element_var.clear()
            element_var.addItems(values)
        search_type_var.currentIndexChanged.connect(update_combo)
        update_combo()
        def search_slot():
            search_type = search_type_var.currentText()
            element_name = element_var.currentText()
            if not element_name:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç")
                return
            free_slots = self.schedule[self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ']
            if search_type == "–ì—Ä—É–ø–ø–∞":
                free_slots = free_slots[free_slots['group_name'] == element_name]
            elif search_type == "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
                free_slots = free_slots[free_slots['teacher_name'] == '']
            else:
                free_slots = free_slots[free_slots['classroom_name'] == '']
            if not free_slots.empty:
                first_slot = free_slots.iloc[0]
                QMessageBox.information(self, "–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç", f"–ë–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç:\n–ù–µ–¥–µ–ª—è: {first_slot['week']}\n–î–µ–Ω—å: {first_slot['day']}\n–í—Ä–µ–º—è: {first_slot['time']}\n–ì—Ä—É–ø–ø–∞: {first_slot['group_name']}")
            else:
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        search_btn = QPushButton("–ù–∞–π—Ç–∏")
        search_btn.clicked.connect(search_slot)
        layout.addWidget(search_btn)
        dialog.exec_()
    def show_about(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        dialog.setModal(True)
        dialog.setFixedSize(605, 650)
        dialog.setWindowFlags(dialog.windowFlags() & ~Qt.WindowContextHelpButtonHint)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_label = QLabel("üéì")
        logo_label.setFont(QFont('Arial', 48, QFont.Bold))
        logo_label.setAlignment(Qt.AlignCenter)
        scroll_layout.addWidget(logo_label)
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        title_label = QLabel("–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        title_label.setFont(QFont('Arial', 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        scroll_layout.addWidget(title_label)
        # –í–µ—Ä—Å–∏—è
        version_label = QLabel("–í–µ—Ä—Å–∏—è 2.0")
        version_label.setFont(QFont('Arial', 11, QFont.Bold))
        version_label.setAlignment(Qt.AlignCenter)
        scroll_layout.addWidget(version_label)
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description_text = (
            "–≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "–ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ —Å–µ–±–µ –º–æ—â–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≥–∏–±–∫–∏–µ\n"
            "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–µ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è\n"
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∑–∞–≤—É—á–µ–π."
        )
        desc_label = QLabel(description_text)
        desc_label.setWordWrap(True)
        desc_label.setAlignment(Qt.AlignLeft)
        scroll_layout.addWidget(desc_label)
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        features_title = QLabel("üîë –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        features_title.setFont(QFont('Arial', 12, QFont.Bold))
        features_title.setAlignment(Qt.AlignLeft)
        scroll_layout.addWidget(features_title)
        features_text = (
            "‚Ä¢ üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ ‚úçÔ∏è –ü–æ–ª–Ω—ã–π —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∞–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –≤–µ–¥–µ–Ω–∏–µ–º –∂—É—Ä–Ω–∞–ª–∞\n"
            "‚Ä¢ üìÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø\n"
            "‚Ä¢ üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n"
            "‚Ä¢ üíæ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π\n"
            "‚Ä¢ üåê –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ HTML –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Excel\n"
            "‚Ä¢ üõ°Ô∏è–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö: –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–¥–º–µ—Ç—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"
        )
        features_label = QLabel(features_text)
        features_label.setWordWrap(True)
        features_label.setAlignment(Qt.AlignLeft)
        scroll_layout.addWidget(features_label)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
        dev_frame = QFrame()
        dev_layout = QVBoxLayout(dev_frame)
        dev_layout.addWidget(QLabel("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:", font=QFont('Arial', 10, QFont.Bold)))
        dev_layout.addWidget(QLabel("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Mikhail Lukomskiy"))
        dev_layout.addWidget(QLabel("üìß –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞: support@lukomsky.ru"))
        dev_layout.addWidget(QLabel("üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: www.lukomsky.ru"))
        dev_layout.addWidget(QLabel("üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: 2025"))
        scroll_layout.addWidget(dev_frame)
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏
        school_frame = QFrame()
        school_layout = QVBoxLayout(school_frame)
        school_layout.addWidget(QLabel("üè´ –¢–µ–∫—É—â–µ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:", font=QFont('Arial', 10, QFont.Bold)))
        school_layout.addWidget(QLabel(f"{self.settings.get('school_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"))
        school_layout.addWidget(QLabel(f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω')}"))
        school_layout.addWidget(QLabel(f"–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}"))
        scroll_layout.addWidget(school_frame)
        scroll_area.setWidget(scroll_content)
        main_layout = QVBoxLayout(dialog)
        main_layout.addWidget(scroll_area)
        close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_button.clicked.connect(dialog.accept)
        main_layout.addWidget(close_button)
        dialog.exec_()
    def save_data(self):
        data = {
            'settings': self.settings,
            'groups': self.groups,
            'teachers': self.teachers,
            'classrooms': self.classrooms,
            'subjects': self.subjects,
            'substitutions': self.substitutions,
            'holidays': self.holidays
        }
        filename, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫", "", "JSON files (*.json);;All files (*.*)")
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                self.create_backup()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    def load_data(self):
        filename, _ = QFileDialog.getOpenFileName(self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "", "JSON files (*.json);;All files (*.*)")
        if filename and os.path.exists(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.settings = data.get('settings', self.settings)
                self.groups = data.get('groups', [])
                self.teachers = data.get('teachers', [])
                self.classrooms = data.get('classrooms', [])
                self.subjects = data.get('subjects', [])
                self.substitutions = data.get('substitutions', [])
                self.holidays = data.get('holidays', [])
                self.load_groups_data()
                self.load_teachers_data()
                self.load_classrooms_data()
                self.load_subjects_data()
                self.load_holidays_data()
                QMessageBox.information(self, "–ó–∞–≥—Ä—É–∑–∫–∞", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                self.create_backup()
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
    def open_substitutions(self):
        # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∂—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ Qt-–≤–µ—Ä—Å–∏–∏.")
    # --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    def run(self):
        self.show()
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ScheduleApp()
    window.run()
    sys.exit(app.exec_())
