import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
import threading
import json
import os
import calendar
import shutil
import zipfile
from pathlib import Path

class BellScheduleEditor:
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
    def __init__(self, parent, current_schedule_str):
        self.parent = parent
        self.result = None  # –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.slots = self._parse_schedule_string(current_schedule_str)
        
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤")
        self.dialog.geometry("500x400")
        self.dialog.transient(parent)
        self.dialog.grab_set()
        self.dialog.resizable(False, False)
        
        self.create_widgets()
        
    def _parse_schedule_string(self, schedule_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü)"""
        if not schedule_str:
            return []
        try:
            slots = []
            for slot_str in schedule_str.split(','):
                start, end = slot_str.strip().split('-')
                slots.append((start.strip(), end.strip()))
            return slots
        except Exception:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            return [("8:00", "8:45"), ("8:55", "9:40"), ("9:50", "10:35"), 
                    ("10:45", "11:30"), ("11:40", "12:25"), ("12:35", "13:20")]
    
    def _format_schedule_string(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return ','.join([f"{start}-{end}" for start, end in self.slots])
    
    def create_widgets(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.dialog, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(main_frame, text="–£—Ä–æ–∫–∏:", font=('Segoe UI', 10, 'bold')).pack(anchor=tk.W, pady=(0, 5))
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        slots_frame = ttk.Frame(main_frame)
        slots_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º Treeview –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤
        columns = ('‚Ññ', '–ù–∞—á–∞–ª–æ', '–ö–æ–Ω–µ—Ü')
        self.tree = ttk.Treeview(slots_frame, columns=columns, show='headings', height=10)
        self.tree.heading('‚Ññ', text='‚Ññ')
        self.tree.heading('–ù–∞—á–∞–ª–æ', text='–ù–∞—á–∞–ª–æ')
        self.tree.heading('–ö–æ–Ω–µ—Ü', text='–ö–æ–Ω–µ—Ü')
        self.tree.column('‚Ññ', width=40, anchor='center')
        self.tree.column('–ù–∞—á–∞–ª–æ', width=100, anchor='center')
        self.tree.column('–ö–æ–Ω–µ—Ü', width=100, anchor='center')
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(slots_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", command=self.add_slot).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_slot).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_slot).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚¨ÜÔ∏è –í–≤–µ—Ä—Ö", command=self.move_up).pack(side=tk.LEFT, padx=(20, 5))
        ttk.Button(btn_frame, text="‚¨áÔ∏è –í–Ω–∏–∑", command=self.move_down).pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∏ –û–ö/–û—Ç–º–µ–Ω–∞
        action_frame = ttk.Frame(main_frame)
        action_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(action_frame, text="–û—Ç–º–µ–Ω–∞", command=self.dialog.destroy).pack(side=tk.RIGHT, padx=(5, 0))
        ttk.Button(action_frame, text="–û–ö", command=self.save_and_close).pack(side=tk.RIGHT)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        self.load_slots_to_tree()
    
    def load_slots_to_tree(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –≤ Treeview"""
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        for i, (start, end) in enumerate(self.slots, 1):
            self.tree.insert('', tk.END, values=(i, start, end))
    
    def add_slot(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–ª–æ—Ç"""
        self._open_slot_editor("–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç")
    
    def edit_slot(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        item = self.tree.item(selected[0])
        values = item['values']
        slot_index = int(values[0]) - 1  # –ù–æ–º–µ—Ä —Å–ª–æ—Ç–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
        
        self._open_slot_editor("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç", slot_index)
    
    def _open_slot_editor(self, title, slot_index=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
        editor = tk.Toplevel(self.dialog)
        editor.title(title)
        editor.geometry("300x150")
        editor.transient(self.dialog)
        editor.grab_set()
        editor.resizable(False, False)
        
        ttk.Label(editor, text="–ù–∞—á–∞–ª–æ (–ß–ß:–ú–ú):").grid(row=0, column=0, padx=10, pady=10, sticky=tk.W)
        start_var = tk.StringVar()
        start_entry = ttk.Entry(editor, textvariable=start_var, width=10)
        start_entry.grid(row=0, column=1, padx=10, pady=10)
        
        ttk.Label(editor, text="–ö–æ–Ω–µ—Ü (–ß–ß:–ú–ú):").grid(row=1, column=0, padx=10, pady=10, sticky=tk.W)
        end_var = tk.StringVar()
        end_entry = ttk.Entry(editor, textvariable=end_var, width=10)
        end_entry.grid(row=1, column=1, padx=10, pady=10)
        
        if slot_index is not None:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            start_var.set(self.slots[slot_index][0])
            end_var.set(self.slots[slot_index][1])
        
        def save_slot():
            start_time = start_var.get().strip()
            end_time = end_var.get().strip()
            
            if not self._validate_time_format(start_time) or not self._validate_time_format(end_time):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
                return
            
            if slot_index is None:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
                self.slots.append((start_time, end_time))
            else:
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞
                self.slots[slot_index] = (start_time, end_time)
            
            self.load_slots_to_tree()
            editor.destroy()
        
        ttk.Button(editor, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_slot).grid(row=2, column=0, columnspan=2, pady=10)
    
    def _validate_time_format(self, time_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É –ß–ß:–ú–ú"""
        import re
        pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
        return re.match(pattern, time_str) is not None
    
    def delete_slot(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç?"):
            item = self.tree.item(selected[0])
            values = item['values']
            slot_index = int(values[0]) - 1
            del self.slots[slot_index]
            self.load_slots_to_tree()
    
    def move_up(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤–≤–µ—Ä—Ö"""
        selected = self.tree.selection()
        if not selected:
            return
        
        item = self.tree.item(selected[0])
        values = item['values']
        slot_index = int(values[0]) - 1
        
        if slot_index > 0:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–ª–æ—Ç–æ–º
            self.slots[slot_index], self.slots[slot_index - 1] = self.slots[slot_index - 1], self.slots[slot_index]
            self.load_slots_to_tree()
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_selection_id = self.tree.get_children()[slot_index - 1]
            self.tree.selection_set(new_selection_id)
    
    def move_down(self):
        """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –≤–Ω–∏–∑"""
        selected = self.tree.selection()
        if not selected:
            return
        
        item = self.tree.item(selected[0])
        values = item['values']
        slot_index = int(values[0]) - 1
        
        if slot_index < len(self.slots) - 1:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ—Ç–æ–º
            self.slots[slot_index], self.slots[slot_index + 1] = self.slots[slot_index + 1], self.slots[slot_index]
            self.load_slots_to_tree()
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ—Ç –∂–µ —Å–ª–æ—Ç –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_selection_id = self.tree.get_children()[slot_index + 1]
            self.tree.selection_set(new_selection_id)
    
    def save_and_close(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
        self.result = self._format_schedule_string()
        self.dialog.destroy()

class ScheduleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üéì –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        self.root.geometry("1400x900")
        self.root.minsize(1200, 800)
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.settings = {
            'days_per_week': 5,
            'lessons_per_day': 6,
            'weeks': 2,
            'start_date': datetime.now().date().isoformat(),
            'school_name': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ',
            'director': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            'academic_year': f"{datetime.now().year}-{datetime.now().year + 1}",
            'auto_backup': True,
            'backup_interval': 30,  # –º–∏–Ω—É—Ç—ã
            'max_backups': 10,
            'last_academic_year_update': datetime.now().year  # –ì–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∂–∞
        }
        self.groups = []
        self.teachers = []
        self.classrooms = []
        self.subjects = []
        self.schedule = pd.DataFrame()
        self.substitutions = []  # –ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω
        self.holidays = []  # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
        self.backup_timer = None
        self.last_backup_time = None
        self.next_backup_time = None
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
        self.week_var = tk.StringVar()
        self.group_filter_var = tk.StringVar()
        self.teacher_filter_var = tk.StringVar()
        self.classroom_filter_var = tk.StringVar()
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        self.backup_dir = "backups"
        if not os.path.exists(self.backup_dir):
            os.makedirs(self.backup_dir)
        self.create_widgets()
        self.load_data()
        self.start_auto_backup()
        self.check_and_update_experience()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∂–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    def create_widgets(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π
        style = ttk.Style()
        style.theme_use('clam')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É 'clam' –¥–ª—è –±–æ–ª—å—à–µ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏

        # --- –ù–û–í–ê–Ø –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê ---
        colors = {
            'primary': '#4a6fa5',      # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏–Ω–∏–π
            'secondary': '#166088',    # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π
            'accent': '#47b8e0',       # –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π –≥–æ–ª—É–±–æ–π
            'success': '#3cba92',      # –ó–µ–ª–µ–Ω—ã–π (—É—Å–ø–µ—Ö)
            'warning': '#f4a261',      # –û—Ä–∞–Ω–∂–µ–≤—ã–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            'danger': '#e71d36',       # –ö—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∞)
            'light': '#f8f9fa',        # –°–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω
            'dark': '#343a40',         # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
            'border': '#dee2e6',       # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
            'hover': '#e9ecef'         # –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        style.configure('Title.TLabel', font=('Segoe UI', 18, 'bold'), foreground=colors['secondary'])
        style.configure('Header.TLabel', font=('Segoe UI', 12, 'bold'), foreground=colors['dark'])
        style.configure('TButton', font=('Segoe UI', 10), padding=6)
        style.configure('TNotebook.Tab', padding=[12, 8], font=('Segoe UI', 10))
        style.configure('Backup.TLabel', font=('Segoe UI', 10, 'bold'))
        style.configure('BackupActive.TLabel', font=('Segoe UI', 10, 'bold'), foreground=colors['success'])
        style.configure('BackupInactive.TLabel', font=('Segoe UI', 10, 'bold'), foreground=colors['danger'])

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure('Accent.TButton', background=colors['accent'], foreground='white', font=('Segoe UI', 10, 'bold'))
        style.map('Accent.TButton', background=[('active', '#3aa1c9')]) # –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏

        # –°—Ç–∏–ª—å –¥–ª—è Treeview (—Ç–∞–±–ª–∏—Ü)
        style.configure('Treeview', rowheight=80, font=('Segoe UI', 10), background='white', fieldbackground='white') # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        style.configure('Treeview.Heading', font=('Segoe UI', 10, 'bold'), background=colors['primary'], foreground='white')
        style.map('Treeview', background=[('selected', colors['accent'])], foreground=[('selected', 'white')])
        # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –°–¢–ò–õ–ï–ô ---
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=(0, 15))
        title_label = ttk.Label(title_frame, text="üéì –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", 
                               style='Title.TLabel')
        title_label.pack(side=tk.LEFT)
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(title_frame)
        buttons_frame.pack(side=tk.RIGHT)
        ttk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=self.save_data).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", 
                  command=self.load_data).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.open_settings).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üõ°Ô∏è –ë—ç–∫–∞–ø", 
                  command=self.open_backup_manager).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚ùì –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
                  command=self.show_about).pack(side=tk.LEFT)
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞
        self.backup_indicator_frame = ttk.Frame(title_frame)
        self.backup_indicator_frame.pack(side=tk.RIGHT, padx=(20, 0))
        self.backup_status_label = ttk.Label(self.backup_indicator_frame, 
                                           text="–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–ö–õ", 
                                           style='BackupActive.TLabel')
        self.backup_status_label.pack(side=tk.TOP)
        self.backup_info_label = ttk.Label(self.backup_indicator_frame, 
                                         text="–°–ª–µ–¥—É—é—â–∏–π: --:--", 
                                         style='Backup.TLabel')
        self.backup_info_label.pack(side=tk.TOP)
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", padding=10)
        settings_frame.pack(fill=tk.X, pady=(0, 10))
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        params_frame = ttk.Frame(settings_frame)
        params_frame.pack(fill=tk.X)
        ttk.Label(params_frame, text="–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.days_var = tk.StringVar(value=str(self.settings['days_per_week']))
        days_spin = ttk.Spinbox(params_frame, from_=1, to=7, width=5, textvariable=self.days_var)
        days_spin.grid(row=0, column=1, padx=(0, 20))
        ttk.Label(params_frame, text="–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:").grid(row=0, column=2, sticky=tk.W, padx=(0, 10))
        self.lessons_var = tk.StringVar(value=str(self.settings['lessons_per_day']))
        lessons_spin = ttk.Spinbox(params_frame, from_=1, to=12, width=5, textvariable=self.lessons_var)
        lessons_spin.grid(row=0, column=3, padx=(0, 20))
        ttk.Label(params_frame, text="–ù–µ–¥–µ–ª—å:").grid(row=0, column=4, sticky=tk.W, padx=(0, 10))
        self.weeks_var = tk.StringVar(value=str(self.settings['weeks']))
        weeks_spin = ttk.Spinbox(params_frame, from_=1, to=12, width=5, textvariable=self.weeks_var)
        weeks_spin.grid(row=0, column=5, padx=(0, 20))
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame2 = ttk.Frame(settings_frame)
        buttons_frame2.pack(fill=tk.X, pady=(10, 0))
        ttk.Button(buttons_frame2, text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 
                  command=self.generate_schedule_thread).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame2, text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç", 
                  command=self.check_conflicts).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame2, text="‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", 
                  command=self.optimize_schedule).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame2, text="üìä –û—Ç—á–µ—Ç—ã", 
                  command=self.show_reports).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame2, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", 
                  command=self.export_to_excel).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(buttons_frame2, text="üåê –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML", 
                  command=self.export_to_html).pack(side=tk.LEFT, padx=(0, 10)) # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ttk.Button(buttons_frame2, text="üîÑ –ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω", 
                  command=self.open_substitutions).pack(side=tk.LEFT)
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ttk.Progressbar(settings_frame, mode='indeterminate')
        self.progress.pack(fill=tk.X, pady=(10, 0))
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill=tk.BOTH, expand=True)
        # –í–∫–ª–∞–¥–∫–∞ –ì—Ä—É–ø–ø—ã
        self.groups_frame = ttk.Frame(notebook)
        notebook.add(self.groups_frame, text="üë• –ì—Ä—É–ø–ø—ã")
        self.create_groups_tab()
        # –í–∫–ª–∞–¥–∫–∞ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
        self.teachers_frame = ttk.Frame(notebook)
        notebook.add(self.teachers_frame, text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")
        self.create_teachers_tab()
        # –í–∫–ª–∞–¥–∫–∞ –ê—É–¥–∏—Ç–æ—Ä–∏–∏
        self.classrooms_frame = ttk.Frame(notebook)
        notebook.add(self.classrooms_frame, text="üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏")
        self.create_classrooms_tab()
        # –í–∫–ª–∞–¥–∫–∞ –ü—Ä–µ–¥–º–µ—Ç—ã
        self.subjects_frame = ttk.Frame(notebook)
        notebook.add(self.subjects_frame, text="üìö –ü—Ä–µ–¥–º–µ—Ç—ã")
        self.create_subjects_tab()
        # –í–∫–ª–∞–¥–∫–∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self.schedule_frame = ttk.Frame(notebook)
        notebook.add(self.schedule_frame, text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        self.create_schedule_tab()
        # –í–∫–ª–∞–¥–∫–∞ –û—Ç—á–µ—Ç—ã
        self.reports_frame = ttk.Frame(notebook)
        notebook.add(self.reports_frame, text="üìà –û—Ç—á–µ—Ç—ã")
        self.create_reports_tab()
        # –í–∫–ª–∞–¥–∫–∞ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
        self.holidays_frame = ttk.Frame(notebook)
        notebook.add(self.holidays_frame, text="üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏")
        self.create_holidays_tab()
        # --- –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê: –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ---
        self.archive_frame = ttk.Frame(notebook)
        notebook.add(self.archive_frame, text="üíæ –ê—Ä—Ö–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        self.create_archive_tab()
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W)
        status_bar.pack(fill=tk.X, pady=(10, 0))
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—ç–∫–∞–ø–∞
        self.update_backup_indicator()

    def save_current_schedule(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤"""
        if self.schedule.empty:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        school_name = self.settings.get('school_name', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ').replace(" ", "_")
        academic_year = self.settings.get('academic_year', '–ì–æ–¥_–Ω–µ_—É–∫–∞–∑–∞–Ω').replace("/", "_")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{school_name}_{academic_year}_{timestamp}.json"
        filepath = os.path.join(self.archive_dir, filename)

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            schedule_dict = self.schedule.to_dict(orient='records') if not self.schedule.empty else []

            archive_data = {
                'settings': self.settings,
                'groups': self.groups,
                'teachers': self.teachers,
                'classrooms': self.classrooms,
                'subjects': self.subjects,
                'schedule': schedule_dict,
                'holidays': self.holidays,
                'substitutions': self.substitutions,
                'saved_at': datetime.now().isoformat()
            }

            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(archive_data, f, ensure_ascii=False, indent=2)

            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤!\n–§–∞–π–ª: {filename}")
            self.load_archive_list() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.create_backup() # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤: {str(e)}")

    def load_archive_list(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.archive_tree.get_children():
            self.archive_tree.delete(item)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            archive_files = [f for f in os.listdir(self.archive_dir) if f.endswith('.json')]
            archive_files.sort(key=lambda x: os.path.getmtime(os.path.join(self.archive_dir, x)), reverse=True) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)

            for filename in archive_files:
                filepath = os.path.join(self.archive_dir, filename)
                stat = os.stat(filepath)
                creation_time = datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')

                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    
                    groups_count = len(data.get('groups', []))
                    teachers_count = len(data.get('teachers', []))
                    classrooms_count = len(data.get('classrooms', []))
                    subjects_count = len(data.get('subjects', []))
                    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
                    schedule = data.get('schedule', [])
                    lessons_count = len([s for s in schedule if s.get('status') == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'])

                    self.archive_tree.insert('', tk.END, values=(
                        filename,
                        creation_time,
                        groups_count,
                        teachers_count,
                        classrooms_count,
                        subjects_count,
                        lessons_count
                    ))
                except Exception as e:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –∏ –¥–∞—Ç—É
                    self.archive_tree.insert('', tk.END, values=(
                        filename,
                        creation_time,
                        "–û—à–∏–±–∫–∞",
                        "–û—à–∏–±–∫–∞",
                        "–û—à–∏–±–∫–∞",
                        "–û—à–∏–±–∫–∞",
                        "–û—à–∏–±–∫–∞"
                    ))

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–∞: {e}")

    def load_archived_schedule(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        selected = self.archive_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return

        item = self.archive_tree.item(selected[0])
        filename = item['values'][0]
        filepath = os.path.join(self.archive_dir, filename)

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ {filename}?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã."):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                self.settings = data.get('settings', self.settings)
                self.groups = data.get('groups', [])
                self.teachers = data.get('teachers', [])
                self.classrooms = data.get('classrooms', [])
                self.subjects = data.get('subjects', [])
                self.holidays = data.get('holidays', [])
                self.substitutions = data.get('substitutions', [])

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                schedule_data = data.get('schedule', [])
                if schedule_data:
                    self.schedule = pd.DataFrame(schedule_data)
                else:
                    self.schedule = pd.DataFrame()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.load_groups_data()
                self.load_teachers_data()
                self.load_classrooms_data()
                self.load_subjects_data()
                self.load_holidays_data()
                self.filter_schedule()
                self.update_reports()

                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ {filename}")
                self.create_backup() # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏

            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

    def delete_archived_schedule(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        selected = self.archive_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item = self.archive_tree.item(selected[0])
        filename = item['values'][0]
        filepath = os.path.join(self.archive_dir, filename)

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}?"):
            try:
                os.remove(filepath)
                self.load_archive_list() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∞—Ä—Ö–∏–≤–∞")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                
    def export_archived_schedule(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Excel"""
        selected = self.archive_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        item = self.archive_tree.item(selected[0])
        filename = item['values'][0]
        filepath = os.path.join(self.archive_dir, filename)

        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
        save_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            title=f"–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {filename}"
        )

        if not save_path:
            return

        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule_data = data.get('schedule', [])
            if not schedule_data:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                return

            archive_schedule = pd.DataFrame(schedule_data)

            with pd.ExcelWriter(save_path, engine='openpyxl') as writer:
                # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                confirmed_schedule = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'] if not archive_schedule.empty else archive_schedule
                if not confirmed_schedule.empty:
                    confirmed_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                else:
                    archive_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)

                # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                pd.DataFrame(data.get('groups', [])).to_excel(writer, sheet_name='–ì—Ä—É–ø–ø—ã', index=False)
                pd.DataFrame(data.get('teachers', [])).to_excel(writer, sheet_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', index=False)
                pd.DataFrame(data.get('classrooms', [])).to_excel(writer, sheet_name='–ê—É–¥–∏—Ç–æ—Ä–∏–∏', index=False)
                pd.DataFrame(data.get('subjects', [])).to_excel(writer, sheet_name='–ü—Ä–µ–¥–º–µ—Ç—ã', index=False)
                pd.DataFrame(data.get('holidays', [])).to_excel(writer, sheet_name='–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', index=False)

                # –û—Ç—á–µ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è)
                if not archive_schedule.empty and not archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
                    teacher_report = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').agg({
                        'group_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    teacher_report.columns = ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    teacher_report['–ß–∞—Å—ã'] = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size().values
                    teacher_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π', index=False)

                    group_report = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').agg({
                        'teacher_name': lambda x: ', '.join(x.unique()),
                        'subject_name': lambda x: ', '.join(x.unique())
                    }).reset_index()
                    group_report.columns = ['–ì—Ä—É–ø–ø–∞', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                    group_report['–ß–∞—Å—ã'] = archive_schedule[archive_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size().values
                    group_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø', index=False)

            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {save_path}")

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")                

    def create_groups_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.groups_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", command=self.add_group).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_group).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", command=self.delete_group).pack(side=tk.LEFT)
        # –¢–∞–±–ª–∏—Ü–∞ –≥—Ä—É–ø–ø
        columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø', '–°—Ç—É–¥–µ–Ω—Ç—ã', '–ö—É—Ä—Å', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å')
        self.groups_tree = ttk.Treeview(self.groups_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.groups_tree.heading(col, text=col)
            self.groups_tree.column(col, width=120)
        self.groups_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.groups_frame, orient=tk.VERTICAL, command=self.groups_tree.yview)
        self.groups_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    def create_teachers_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.teachers_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", command=self.add_teacher).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_teacher).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", command=self.delete_teacher).pack(side=tk.LEFT)
        ttk.Button(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–∂", command=self.update_all_experience).pack(side=tk.LEFT, padx=(10, 0))
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        columns = ('ID', '–§–ò–û', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ú–∞–∫—Å. —á–∞—Å–æ–≤', '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è', '–°—Ç–∞–∂')
        self.teachers_tree = ttk.Treeview(self.teachers_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.teachers_tree.heading(col, text=col)
            self.teachers_tree.column(col, width=150)
        self.teachers_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.teachers_frame, orient=tk.VERTICAL, command=self.teachers_tree.yview)
        self.teachers_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    def create_classrooms_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.classrooms_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é", command=self.add_classroom).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_classroom).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é", command=self.delete_classroom).pack(side=tk.LEFT)
        # –¢–∞–±–ª–∏—Ü–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π
        columns = ('ID', '–ù–æ–º–µ—Ä', '–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', '–¢–∏–ø', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
        self.classrooms_tree = ttk.Treeview(self.classrooms_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.classrooms_tree.heading(col, text=col)
            self.classrooms_tree.column(col, width=150)
        self.classrooms_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.classrooms_frame, orient=tk.VERTICAL, command=self.classrooms_tree.yview)
        self.classrooms_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    def create_subjects_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.subjects_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", command=self.add_subject).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_subject).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", command=self.delete_subject).pack(side=tk.LEFT)
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        columns = ('ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø –≥—Ä—É–ø–ø—ã', '–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é', '–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è', '–ö–∞—Ñ–µ–¥—Ä–∞')
        self.subjects_tree = ttk.Treeview(self.subjects_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.subjects_tree.heading(col, text=col)
            self.subjects_tree.column(col, width=150)
        self.subjects_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.subjects_frame, orient=tk.VERTICAL, command=self.subjects_tree.yview)
        self.subjects_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    def create_schedule_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_frame = ttk.Frame(self.schedule_frame)
        filter_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
        ttk.Label(filter_frame, text="–§–∏–ª—å—Ç—Ä—ã:", font=('Segoe UI', 11, 'bold')).pack(side=tk.LEFT, padx=(0, 20))

        # –ù–µ–¥–µ–ª—è
        week_frame = ttk.Frame(filter_frame)
        week_frame.pack(side=tk.LEFT, padx=(0, 15))
        ttk.Label(week_frame, text="–ù–µ–¥–µ–ª—è:").pack(side=tk.LEFT)
        week_combo = ttk.Combobox(week_frame, textvariable=self.week_var, width=8, state="readonly")
        week_combo['values'] = [f"–ù–µ–¥–µ–ª—è {i}" for i in range(1, 13)]
        week_combo.current(0)
        week_combo.pack(side=tk.LEFT, padx=(5, 0))
        week_combo.bind('<<ComboboxSelected>>', self.filter_schedule)

        # –ì—Ä—É–ø–ø–∞
        group_frame = ttk.Frame(filter_frame)
        group_frame.pack(side=tk.LEFT, padx=(0, 15))
        ttk.Label(group_frame, text="–ì—Ä—É–ø–ø–∞:").pack(side=tk.LEFT)
        group_combo = ttk.Combobox(group_frame, textvariable=self.group_filter_var, width=12, state="readonly")
        group_combo.pack(side=tk.LEFT, padx=(5, 0))
        group_combo.bind('<<ComboboxSelected>>', self.filter_schedule)

        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        teacher_frame = ttk.Frame(filter_frame)
        teacher_frame.pack(side=tk.LEFT, padx=(0, 15))
        ttk.Label(teacher_frame, text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").pack(side=tk.LEFT)
        teacher_combo = ttk.Combobox(teacher_frame, textvariable=self.teacher_filter_var, width=12, state="readonly")
        teacher_combo.pack(side=tk.LEFT, padx=(5, 0))
        teacher_combo.bind('<<ComboboxSelected>>', self.filter_schedule)

        # –ê—É–¥–∏—Ç–æ—Ä–∏—è
        classroom_frame = ttk.Frame(filter_frame)
        classroom_frame.pack(side=tk.LEFT, padx=(0, 15))
        ttk.Label(classroom_frame, text="–ê—É–¥–∏—Ç–æ—Ä–∏—è:").pack(side=tk.LEFT)
        classroom_combo = ttk.Combobox(classroom_frame, textvariable=self.classroom_filter_var, width=12, state="readonly")
        classroom_combo.pack(side=tk.LEFT, padx=(5, 0))
        classroom_combo.bind('<<ComboboxSelected>>', self.filter_schedule)

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ttk.Button(filter_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.filter_schedule).pack(side=tk.LEFT, padx=(10, 0))

        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        columns = ('–í—Ä–µ–º—è', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        self.schedule_tree = ttk.Treeview(self.schedule_frame, columns=columns, show='headings', height=20)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        self.schedule_tree.column('–í—Ä–µ–º—è', width=100, anchor='center')
        for day in columns[1:]:
            self.schedule_tree.column(day, width=220, anchor='center') # –£–≤–µ–ª–∏—á–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

        for col in columns:
            self.schedule_tree.heading(col, text=col)

        self.schedule_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=(0, 10), pady=(0, 10))

        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar_y = ttk.Scrollbar(self.schedule_frame, orient=tk.VERTICAL, command=self.schedule_tree.yview)
        scrollbar_x = ttk.Scrollbar(self.schedule_frame, orient=tk.HORIZONTAL, command=self.schedule_tree.xview)
        self.schedule_tree.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
        scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Å—Ç–∏–ª—å)
        schedule_buttons_frame = ttk.Frame(self.schedule_frame)
        schedule_buttons_frame.pack(fill=tk.X, pady=(10, 0))

        buttons = [
            ("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.add_lesson),
            ("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", self.edit_lesson),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.delete_lesson),
            ("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", self.substitute_lesson),
            ("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", self.show_calendar),
            ("üåê –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML", self.export_to_html),
            ("‚è±Ô∏è –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è", self.find_free_slot)  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ]

        for text, command in buttons:
            btn = ttk.Button(schedule_buttons_frame, text=text, command=command)
            btn.pack(side=tk.LEFT, padx=(0, 5))

    def find_free_slot(self):
        """–ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è")
        dialog.geometry("400x250")
        dialog.transient(self.root)
        dialog.grab_set()

        ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:").pack(pady=5)
        search_type_var = tk.StringVar(value="group")
        ttk.Radiobutton(dialog, text="–ì—Ä—É–ø–ø–∞", variable=search_type_var, value="group").pack()
        ttk.Radiobutton(dialog, text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", variable=search_type_var, value="teacher").pack()
        ttk.Radiobutton(dialog, text="–ê—É–¥–∏—Ç–æ—Ä–∏—è", variable=search_type_var, value="classroom").pack()

        ttk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç:").pack(pady=5)
        element_var = tk.StringVar()
        element_combo = ttk.Combobox(dialog, textvariable=element_var, state="readonly")
        element_combo.pack()

        def update_combo():
            search_type = search_type_var.get()
            if search_type == "group":
                values = [g['name'] for g in self.groups]
            elif search_type == "teacher":
                values = [t['name'] for t in self.teachers]
            else:
                values = [c['name'] for c in self.classrooms]
            element_combo['values'] = values
            if values:
                element_var.set(values[0])

        search_type_var.trace('w', lambda *args: update_combo())
        update_combo()

        def search_slot():
            search_type = search_type_var.get()
            element_name = element_var.get()
            if not element_name:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç")
                return

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            free_slots = self.schedule[self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ']
            if search_type == "group":
                free_slots = free_slots[free_slots['group_name'] == element_name]
            elif search_type == "teacher":
                # –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏—â–µ–º —Å–ª–æ—Ç—ã, –≥–¥–µ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å
                free_slots = free_slots[free_slots['teacher_name'] == ''] # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
            else:
                free_slots = free_slots[free_slots['classroom_name'] == '']

            if not free_slots.empty:
                first_slot = free_slots.iloc[0]
                messagebox.showinfo("–°–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç", 
                    f"–ë–ª–∏–∂–∞–π—à–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç:\n"
                    f"–ù–µ–¥–µ–ª—è: {first_slot['week']}\n"
                    f"–î–µ–Ω—å: {first_slot['day']}\n"
                    f"–í—Ä–µ–º—è: {first_slot['time']}\n"
                    f"–ì—Ä—É–ø–ø–∞: {first_slot['group_name']}")
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
        ttk.Button(dialog, text="–ù–∞–π—Ç–∏", command=search_slot).pack(pady=20)

    def create_reports_tab(self):
        # –§—Ä–µ–π–º—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        reports_notebook = ttk.Notebook(self.reports_frame)
        reports_notebook.pack(fill=tk.BOTH, expand=True)
        # –û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        teacher_report_frame = ttk.Frame(reports_notebook)
        reports_notebook.add(teacher_report_frame, text="üë®‚Äçüè´ –ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        columns = ('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ß–∞—Å—ã', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã')
        self.teacher_report_tree = ttk.Treeview(teacher_report_frame, columns=columns, show='headings')
        for col in columns:
            self.teacher_report_tree.heading(col, text=col)
            self.teacher_report_tree.column(col, width=200)
        self.teacher_report_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        scrollbar = ttk.Scrollbar(teacher_report_frame, orient=tk.VERTICAL, command=self.teacher_report_tree.yview)
        self.teacher_report_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # –û—Ç—á–µ—Ç –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø
        group_report_frame = ttk.Frame(reports_notebook)
        reports_notebook.add(group_report_frame, text="üë• –ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø")
        columns = ('–ì—Ä—É–ø–ø–∞', '–ß–∞—Å—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏')
        self.group_report_tree = ttk.Treeview(group_report_frame, columns=columns, show='headings')
        for col in columns:
            self.group_report_tree.heading(col, text=col)
            self.group_report_tree.column(col, width=200)
        self.group_report_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        scrollbar = ttk.Scrollbar(group_report_frame, orient=tk.VERTICAL, command=self.group_report_tree.yview)
        self.group_report_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # –û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º
        conflicts_frame = ttk.Frame(reports_notebook)
        reports_notebook.add(conflicts_frame, text="‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã")
        self.conflicts_text = tk.Text(conflicts_frame, wrap=tk.WORD)
        self.conflicts_text.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        scrollbar = ttk.Scrollbar(conflicts_frame, orient=tk.VERTICAL, command=self.conflicts_text.yview)
        self.conflicts_text.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary_frame = ttk.Frame(reports_notebook)
        reports_notebook.add(summary_frame, text="üìã –°–≤–æ–¥–∫–∞")
        self.summary_text = tk.Text(summary_frame, wrap=tk.WORD)
        self.summary_text.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        scrollbar = ttk.Scrollbar(summary_frame, orient=tk.VERTICAL, command=self.summary_text.yview)
        self.summary_text.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ —Ñ—Ä–µ–π–º—ã —Å–æ–∑–¥–∞–Ω—ã
        self.load_groups_data()
        self.load_teachers_data()
        self.load_classrooms_data()
        self.load_subjects_data()

    def add_holiday(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫")
        dialog.geometry("400x200")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        date_entry = ttk.Entry(dialog, width=20)
        date_entry.grid(row=0, column=1, padx=10, pady=5)
        date_entry.insert(0, datetime.now().date().isoformat()) # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=30)
        name_entry.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–¢–∏–ø:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        type_var = tk.StringVar(value="–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π")
        type_combo = ttk.Combobox(dialog, textvariable=type_var, 
                                 values=["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π", "–£—á–µ–±–Ω—ã–π", "–ö–∞–Ω–∏–∫—É–ª—ã"], state="readonly")
        type_combo.grid(row=2, column=1, padx=10, pady=5)
        def save_holiday():
            if date_entry.get() and name_entry.get():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                try:
                    datetime.strptime(date_entry.get(), '%Y-%m-%d')
                    self.holidays.append({
                        'date': date_entry.get(),
                        'name': name_entry.get(),
                        'type': type_var.get()
                    })
                    self.load_holidays_data()
                    dialog.destroy()
                    self.create_backup()
                except ValueError:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_holiday).grid(row=3, column=0, columnspan=2, pady=20)

    def delete_holiday(self):
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫"""
        selected = self.holidays_tree.selection()
        if selected:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫?"):
                item = self.holidays_tree.item(selected[0])
                holiday_date = item['values'][0]
                holiday_name = item['values'][1]
                # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫ –ø–æ –¥–∞—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤–º–µ—Å—Ç–µ)
                self.holidays = [h for h in self.holidays if not (h['date'] == holiday_date and h['name'] == holiday_name)]
                self.load_holidays_data()
                self.create_backup()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def create_holidays_tab(self):
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.holidays_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫", command=self.add_holiday).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫", command=self.delete_holiday).pack(side=tk.LEFT)
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
        columns = ('–î–∞—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–∏–ø')
        self.holidays_tree = ttk.Treeview(self.holidays_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.holidays_tree.heading(col, text=col)
            self.holidays_tree.column(col, width=200)
        self.holidays_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.holidays_frame, orient=tk.VERTICAL, command=self.holidays_tree.yview)
        self.holidays_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.load_holidays_data()

    def create_archive_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞—Ä—Ö–∏–≤–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—Ä—Ö–∏–≤–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        self.archive_dir = "schedule_archive"
        if not os.path.exists(self.archive_dir):
            os.makedirs(self.archive_dir)

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        btn_frame = ttk.Frame(self.archive_frame)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", command=self.save_current_schedule).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", command=self.load_archived_schedule).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_archived_schedule).pack(side=tk.LEFT)
        ttk.Button(btn_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=self.export_archived_schedule).pack(side=tk.RIGHT, padx=(5, 0))

        # –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        columns = ('–ò–º—è —Ñ–∞–π–ª–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ê—É–¥–∏—Ç–æ—Ä–∏–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã', '–ó–∞–Ω—è—Ç–∏–π')
        self.archive_tree = ttk.Treeview(self.archive_frame, columns=columns, show='headings', height=20)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = {
            '–ò–º—è —Ñ–∞–π–ª–∞': 200,
            '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': 150,
            '–ì—Ä—É–ø–ø—ã': 80,
            '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏': 80,
            '–ê—É–¥–∏—Ç–æ—Ä–∏–∏': 80,
            '–ü—Ä–µ–¥–º–µ—Ç—ã': 80,
            '–ó–∞–Ω—è—Ç–∏–π': 80
        }
        for col in columns:
            self.archive_tree.heading(col, text=col)
            self.archive_tree.column(col, width=column_widths.get(col, 100))

        self.archive_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(self.archive_frame, orient=tk.VERTICAL, command=self.archive_tree.yview)
        self.archive_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        self.load_archive_list()

    def load_groups_data(self):
        self.groups_tree.delete(*self.groups_tree.get_children())
        for group in self.groups:
            self.groups_tree.insert('', tk.END, values=(
                group['id'], group['name'], group.get('type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'), 
                group.get('students', 0), group.get('course', ''), 
                group.get('specialty', '')
            ))
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≥—Ä—É–ø–ø (–µ—Å–ª–∏ schedule_frame —É–∂–µ —Å–æ–∑–¥–∞–Ω)
        if hasattr(self, 'schedule_frame') and self.schedule_frame.winfo_children():
            group_names = [group['name'] for group in self.groups]
            self.group_filter_var.set('')
            # –ù–∞–π–¥–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –≥—Ä—É–ø–ø –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            for child in self.schedule_frame.winfo_children():
                if isinstance(child, ttk.Frame):  # filter_frame
                    for widget in child.winfo_children():
                        if isinstance(widget, ttk.Combobox) and 'group' in str(widget):
                            widget['values'] = [''] + group_names
                            break

    def load_teachers_data(self):
        self.teachers_tree.delete(*self.teachers_tree.get_children())
        for teacher in self.teachers:
            self.teachers_tree.insert('', tk.END, values=(
                teacher['id'], teacher['name'], teacher.get('subjects', ''), 
                teacher.get('max_hours', 0), teacher.get('qualification', ''), 
                teacher.get('experience', 0)
            ))
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ schedule_frame —É–∂–µ —Å–æ–∑–¥–∞–Ω)
        if hasattr(self, 'schedule_frame') and self.schedule_frame.winfo_children():
            teacher_names = [teacher['name'] for teacher in self.teachers]
            self.teacher_filter_var.set('')
            # –ù–∞–π–¥–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            for child in self.schedule_frame.winfo_children():
                if isinstance(child, ttk.Frame):  # filter_frame
                    for widget in child.winfo_children():
                        if isinstance(widget, ttk.Combobox) and 'teacher' in str(widget):
                            widget['values'] = [''] + teacher_names
                            break

    def load_classrooms_data(self):
        self.classrooms_tree.delete(*self.classrooms_tree.get_children())
        for classroom in self.classrooms:
            self.classrooms_tree.insert('', tk.END, values=(
                classroom['id'], classroom['name'], classroom.get('capacity', 0), 
                classroom.get('type', '–æ–±—ã—á–Ω–∞—è'), classroom.get('equipment', ''), 
                classroom.get('location', '')
            ))
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π (–µ—Å–ª–∏ schedule_frame —É–∂–µ —Å–æ–∑–¥–∞–Ω)
        if hasattr(self, 'schedule_frame') and self.schedule_frame.winfo_children():
            classroom_names = [classroom['name'] for classroom in self.classrooms]
            self.classroom_filter_var.set('')
            # –ù–∞–π–¥–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –∞—É–¥–∏—Ç–æ—Ä–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            for child in self.schedule_frame.winfo_children():
                if isinstance(child, ttk.Frame):  # filter_frame
                    for widget in child.winfo_children():
                        if isinstance(widget, ttk.Combobox) and 'classroom' in str(widget):
                            widget['values'] = [''] + classroom_names
                            break

    def load_subjects_data(self):
        self.subjects_tree.delete(*self.subjects_tree.get_children())
        for subject in self.subjects:
            self.subjects_tree.insert('', tk.END, values=(
                subject['id'], subject['name'], subject.get('group_type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'), 
                subject.get('hours_per_week', 0), subject.get('assessment', ''), 
                subject.get('department', '')
            ))

    def load_holidays_data(self):
        self.holidays_tree.delete(*self.holidays_tree.get_children())
        for holiday in self.holidays:
            self.holidays_tree.insert('', tk.END, values=(
                holiday.get('date', ''), 
                holiday.get('name', ''), 
                holiday.get('type', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π')
            ))

    def add_group(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=30)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–¢–∏–ø:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        type_var = tk.StringVar(value="–æ—Å–Ω–æ–≤–Ω–æ–µ")
        type_combo = ttk.Combobox(dialog, textvariable=type_var, values=["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"], state="readonly")
        type_combo.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–°—Ç—É–¥–µ–Ω—Ç–æ–≤:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        students_var = tk.StringVar(value="25")
        students_spin = ttk.Spinbox(dialog, from_=1, to=100, textvariable=students_var, width=10)
        students_spin.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ö—É—Ä—Å:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        course_var = tk.StringVar()
        course_entry = ttk.Entry(dialog, textvariable=course_var, width=30)
        course_entry.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        specialty_var = tk.StringVar()
        specialty_entry = ttk.Entry(dialog, textvariable=specialty_var, width=30)
        specialty_entry.grid(row=4, column=1, padx=10, pady=5)
        def save_group():
            if name_entry.get():
                new_id = max([g['id'] for g in self.groups], default=0) + 1
                self.groups.append({
                    'id': new_id,
                    'name': name_entry.get(),
                    'type': type_var.get(),
                    'students': int(students_var.get()),
                    'course': course_var.get(),
                    'specialty': specialty_var.get()
                })
                self.load_groups_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_group).grid(row=5, column=0, columnspan=2, pady=20)

    def edit_group(self):
        selected = self.groups_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        item = self.groups_tree.item(selected[0])
        group_id = item['values'][0]
        group = next((g for g in self.groups if g['id'] == group_id), None)
        if not group:
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=30)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        name_entry.insert(0, group['name'])
        ttk.Label(dialog, text="–¢–∏–ø:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        type_var = tk.StringVar(value=group.get('type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'))
        type_combo = ttk.Combobox(dialog, textvariable=type_var, values=["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"], state="readonly")
        type_combo.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–°—Ç—É–¥–µ–Ω—Ç–æ–≤:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        students_var = tk.StringVar(value=str(group.get('students', 25)))
        students_spin = ttk.Spinbox(dialog, from_=1, to=100, textvariable=students_var, width=10)
        students_spin.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ö—É—Ä—Å:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        course_var = tk.StringVar(value=group.get('course', ''))
        course_entry = ttk.Entry(dialog, textvariable=course_var, width=30)
        course_entry.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        specialty_var = tk.StringVar(value=group.get('specialty', ''))
        specialty_entry = ttk.Entry(dialog, textvariable=specialty_var, width=30)
        specialty_entry.grid(row=4, column=1, padx=10, pady=5)
        def save_group():
            if name_entry.get():
                group['name'] = name_entry.get()
                group['type'] = type_var.get()
                group['students'] = int(students_var.get())
                group['course'] = course_var.get()
                group['specialty'] = specialty_var.get()
                self.load_groups_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_group).grid(row=5, column=0, columnspan=2, pady=20)

    def delete_group(self):
        selected = self.groups_tree.selection()
        if selected:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É?"):
                item = self.groups_tree.item(selected[0])
                group_id = item['values'][0]
                self.groups = [g for g in self.groups if g['id'] != group_id]
                self.load_groups_data()
                self.create_backup()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def add_teacher(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        dialog.geometry("450x480")  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        ttk.Label(dialog, text="–§–ò–û:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=35)
        name_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        subjects_entry = ttk.Entry(dialog, width=35)
        subjects_entry.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ú–∞–∫—Å. —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        max_hours_var = tk.StringVar(value="20")
        max_hours_spin = ttk.Spinbox(dialog, from_=1, to=50, textvariable=max_hours_var, width=10)
        max_hours_spin.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        qualification_var = tk.StringVar()
        qualification_entry = ttk.Entry(dialog, textvariable=qualification_var, width=35)
        qualification_entry.grid(row=3, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–°—Ç–∞–∂ (–ª–µ—Ç):").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        experience_var = tk.StringVar(value="0")
        experience_spin = ttk.Spinbox(dialog, from_=0, to=50, textvariable=experience_var, width=10)
        experience_spin.grid(row=4, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        contacts_var = tk.StringVar()
        contacts_entry = ttk.Entry(dialog, textvariable=contacts_var, width=35)
        contacts_entry.grid(row=5, column=1, padx=10, pady=5)

        # --- –ù–û–í–´–ï –ü–û–õ–Ø: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
        ttk.Label(dialog, text="–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–Ω–∏:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        forbidden_days_var = tk.StringVar()
        forbidden_days_entry = ttk.Entry(dialog, textvariable=forbidden_days_var, width=35)
        forbidden_days_entry.grid(row=6, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –°—Ä–µ–¥–∞").grid(row=7, column=1, sticky=tk.W, padx=10, pady=(0, 5))

        ttk.Label(dialog, text="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏:").grid(row=8, column=0, sticky=tk.W, padx=10, pady=5)
        preferred_days_var = tk.StringVar()
        preferred_days_entry = ttk.Entry(dialog, textvariable=preferred_days_var, width=35)
        preferred_days_entry.grid(row=8, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏–º–µ—Ä: –í—Ç–æ—Ä–Ω–∏–∫, –ß–µ—Ç–≤–µ—Ä–≥").grid(row=9, column=1, sticky=tk.W, padx=10, pady=(0, 5))

        ttk.Label(dialog, text="–ú–∞–∫—Å. –ø–∞—Ä –≤ –¥–µ–Ω—å:").grid(row=10, column=0, sticky=tk.W, padx=10, pady=5)
        max_lessons_per_day_var = tk.StringVar(value="6")
        max_lessons_per_day_spin = ttk.Spinbox(dialog, from_=1, to=12, textvariable=max_lessons_per_day_var, width=10)
        max_lessons_per_day_spin.grid(row=10, column=1, padx=10, pady=5)
        # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô ---

        def save_teacher():
            if name_entry.get():
                new_id = max([t['id'] for t in self.teachers], default=0) + 1
                self.teachers.append({
                    'id': new_id,
                    'name': name_entry.get(),
                    'subjects': subjects_entry.get(),
                    'max_hours': int(max_hours_var.get()),
                    'qualification': qualification_var.get(),
                    'experience': int(experience_var.get()),
                    'contacts': contacts_var.get(),
                    # --- –ù–û–í–´–ï –ü–û–õ–Ø ---
                    'forbidden_days': forbidden_days_var.get(),
                    'preferred_days': preferred_days_var.get(),
                    'max_lessons_per_day': int(max_lessons_per_day_var.get())
                    # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô ---
                })
                self.load_teachers_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_teacher).grid(row=11, column=0, columnspan=2, pady=20)    

    def edit_teacher(self):
        selected = self.teachers_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        item = self.teachers_tree.item(selected[0])
        teacher_id = item['values'][0]
        teacher = next((t for t in self.teachers if t['id'] == teacher_id), None)
        if not teacher:
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        dialog.geometry("450x520")  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        ttk.Label(dialog, text="–§–ò–û:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=35)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        name_entry.insert(0, teacher['name'])

        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        subjects_entry = ttk.Entry(dialog, width=35)
        subjects_entry.grid(row=1, column=1, padx=10, pady=5)
        subjects_entry.insert(0, teacher.get('subjects', ''))

        ttk.Label(dialog, text="–ú–∞–∫—Å. —á–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        max_hours_var = tk.StringVar(value=str(teacher.get('max_hours', 20)))
        max_hours_spin = ttk.Spinbox(dialog, from_=1, to=50, textvariable=max_hours_var, width=10)
        max_hours_spin.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        qualification_var = tk.StringVar(value=teacher.get('qualification', ''))
        qualification_entry = ttk.Entry(dialog, textvariable=qualification_var, width=35)
        qualification_entry.grid(row=3, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–°—Ç–∞–∂ (–ª–µ—Ç):").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        experience_var = tk.StringVar(value=str(teacher.get('experience', 0)))
        experience_spin = ttk.Spinbox(dialog, from_=0, to=50, textvariable=experience_var, width=10)
        experience_spin.grid(row=4, column=1, padx=10, pady=5)

        ttk.Label(dialog, text="–ö–æ–Ω—Ç–∞–∫—Ç—ã:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        contacts_var = tk.StringVar(value=teacher.get('contacts', ''))
        contacts_entry = ttk.Entry(dialog, textvariable=contacts_var, width=35)
        contacts_entry.grid(row=5, column=1, padx=10, pady=5)

        # --- –ù–û–í–´–ï –ü–û–õ–Ø: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
        ttk.Label(dialog, text="–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–Ω–∏:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        forbidden_days_var = tk.StringVar(value=teacher.get('forbidden_days', ''))
        forbidden_days_entry = ttk.Entry(dialog, textvariable=forbidden_days_var, width=35)
        forbidden_days_entry.grid(row=6, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –°—Ä–µ–¥–∞").grid(row=7, column=1, sticky=tk.W, padx=10, pady=(0, 5))

        ttk.Label(dialog, text="–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏:").grid(row=8, column=0, sticky=tk.W, padx=10, pady=5)
        preferred_days_var = tk.StringVar(value=teacher.get('preferred_days', ''))
        preferred_days_entry = ttk.Entry(dialog, textvariable=preferred_days_var, width=35)
        preferred_days_entry.grid(row=8, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏–º–µ—Ä: –í—Ç–æ—Ä–Ω–∏–∫, –ß–µ—Ç–≤–µ—Ä–≥").grid(row=9, column=1, sticky=tk.W, padx=10, pady=(0, 5))

        ttk.Label(dialog, text="–ú–∞–∫—Å. –ø–∞—Ä –≤ –¥–µ–Ω—å:").grid(row=10, column=0, sticky=tk.W, padx=10, pady=5)
        max_lessons_per_day_var = tk.StringVar(value=str(teacher.get('max_lessons_per_day', 6)))
        max_lessons_per_day_spin = ttk.Spinbox(dialog, from_=1, to=12, textvariable=max_lessons_per_day_var, width=10)
        max_lessons_per_day_spin.grid(row=10, column=1, padx=10, pady=5)
        # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô ---

        def save_teacher():
            if name_entry.get():
                teacher['name'] = name_entry.get()
                teacher['subjects'] = subjects_entry.get()
                teacher['max_hours'] = int(max_hours_var.get())
                teacher['qualification'] = qualification_var.get()
                teacher['experience'] = int(experience_var.get())
                teacher['contacts'] = contacts_var.get()
                # --- –ù–û–í–´–ï –ü–û–õ–Ø ---
                teacher['forbidden_days'] = forbidden_days_var.get()
                teacher['preferred_days'] = preferred_days_var.get()
                teacher['max_lessons_per_day'] = int(max_lessons_per_day_var.get())
                # --- –ö–û–ù–ï–¶ –ù–û–í–´–• –ü–û–õ–ï–ô ---
                self.load_teachers_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")

        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_teacher).grid(row=11, column=0, columnspan=2, pady=20)

    def delete_teacher(self):
        selected = self.teachers_tree.selection()
        if selected:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è?"):
                item = self.teachers_tree.item(selected[0])
                teacher_id = item['values'][0]
                self.teachers = [t for t in self.teachers if t['id'] != teacher_id]
                self.load_teachers_data()
                self.create_backup()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def update_all_experience(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–∂ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–∂ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 1 –≥–æ–¥?"):
            updated_count = 0
            for teacher in self.teachers:
                teacher['experience'] = teacher.get('experience', 0) + 1
                updated_count += 1
            self.load_teachers_data()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ç–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω —É {updated_count} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")

    def add_classroom(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–æ–º–µ—Ä:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=30)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        capacity_var = tk.StringVar(value="30")
        capacity_spin = ttk.Spinbox(dialog, from_=1, to=200, textvariable=capacity_var, width=10)
        capacity_spin.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–¢–∏–ø:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        type_var = tk.StringVar(value="–æ–±—ã—á–Ω–∞—è")
        type_combo = ttk.Combobox(dialog, textvariable=type_var, 
                                 values=["–æ–±—ã—á–Ω–∞—è", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"], 
                                 state="readonly")
        type_combo.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        equipment_var = tk.StringVar()
        equipment_entry = ttk.Entry(dialog, textvariable=equipment_var, width=30)
        equipment_entry.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        location_var = tk.StringVar()
        location_entry = ttk.Entry(dialog, textvariable=location_var, width=30)
        location_entry.grid(row=4, column=1, padx=10, pady=5)
        def save_classroom():
            if name_entry.get():
                new_id = max([c['id'] for c in self.classrooms], default=0) + 1
                self.classrooms.append({
                    'id': new_id,
                    'name': name_entry.get(),
                    'capacity': int(capacity_var.get()),
                    'type': type_var.get(),
                    'equipment': equipment_var.get(),
                    'location': location_var.get()
                })
                self.load_classrooms_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_classroom).grid(row=5, column=0, columnspan=2, pady=20)

    def edit_classroom(self):
        selected = self.classrooms_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        item = self.classrooms_tree.item(selected[0])
        classroom_id = item['values'][0]
        classroom = next((c for c in self.classrooms if c['id'] == classroom_id), None)
        if not classroom:
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–æ–º–µ—Ä:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=30)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        name_entry.insert(0, classroom['name'])
        ttk.Label(dialog, text="–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        capacity_var = tk.StringVar(value=str(classroom.get('capacity', 30)))
        capacity_spin = ttk.Spinbox(dialog, from_=1, to=200, textvariable=capacity_var, width=10)
        capacity_spin.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–¢–∏–ø:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        type_var = tk.StringVar(value=classroom.get('type', '–æ–±—ã—á–Ω–∞—è'))
        type_combo = ttk.Combobox(dialog, textvariable=type_var, 
                                 values=["–æ–±—ã—á–Ω–∞—è", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –∫–ª–∞—Å—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"], 
                                 state="readonly")
        type_combo.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        equipment_var = tk.StringVar(value=classroom.get('equipment', ''))
        equipment_entry = ttk.Entry(dialog, textvariable=equipment_var, width=30)
        equipment_entry.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        location_var = tk.StringVar(value=classroom.get('location', ''))
        location_entry = ttk.Entry(dialog, textvariable=location_var, width=30)
        location_entry.grid(row=4, column=1, padx=10, pady=5)
        def save_classroom():
            if name_entry.get():
                classroom['name'] = name_entry.get()
                classroom['capacity'] = int(capacity_var.get())
                classroom['type'] = type_var.get()
                classroom['equipment'] = equipment_var.get()
                classroom['location'] = location_var.get()
                self.load_classrooms_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_classroom).grid(row=5, column=0, columnspan=2, pady=20)

    def delete_classroom(self):
        selected = self.classrooms_tree.selection()
        if selected:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é?"):
                item = self.classrooms_tree.item(selected[0])
                classroom_id = item['values'][0]
                self.classrooms = [c for c in self.classrooms if c['id'] != classroom_id]
                self.load_classrooms_data()
                self.create_backup()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def add_subject(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        dialog.geometry("450x350")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=35)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–¢–∏–ø –≥—Ä—É–ø–ø—ã:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        group_type_var = tk.StringVar(value="–æ—Å–Ω–æ–≤–Ω–æ–µ")
        group_type_combo = ttk.Combobox(dialog, textvariable=group_type_var, 
                                       values=["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"], state="readonly")
        group_type_combo.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        hours_var = tk.StringVar(value="4")
        hours_spin = ttk.Spinbox(dialog, from_=1, to=20, textvariable=hours_var, width=10)
        hours_spin.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        assessment_var = tk.StringVar(value="—ç–∫–∑–∞–º–µ–Ω")
        assessment_combo = ttk.Combobox(dialog, textvariable=assessment_var, 
                                       values=["—ç–∫–∑–∞–º–µ–Ω", "–∑–∞—á–µ—Ç", "–∑–∞—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π", "–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç"], 
                                       state="readonly")
        assessment_combo.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ö–∞—Ñ–µ–¥—Ä–∞:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        department_var = tk.StringVar()
        department_entry = ttk.Entry(dialog, textvariable=department_var, width=35)
        department_entry.grid(row=4, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        description_var = tk.StringVar()
        description_entry = ttk.Entry(dialog, textvariable=description_var, width=35)
        description_entry.grid(row=5, column=1, padx=10, pady=5)
        def save_subject():
            if name_entry.get():
                new_id = max([s['id'] for s in self.subjects], default=0) + 1
                self.subjects.append({
                    'id': new_id,
                    'name': name_entry.get(),
                    'group_type': group_type_var.get(),
                    'hours_per_week': int(hours_var.get()),
                    'assessment': assessment_var.get(),
                    'department': department_var.get(),
                    'description': description_var.get()
                })
                self.load_subjects_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_subject).grid(row=6, column=0, columnspan=2, pady=20)

    def edit_subject(self):
        selected = self.subjects_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        item = self.subjects_tree.item(selected[0])
        subject_id = item['values'][0]
        subject = next((s for s in self.subjects if s['id'] == subject_id), None)
        if not subject:
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        dialog.geometry("450x350")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        name_entry = ttk.Entry(dialog, width=35)
        name_entry.grid(row=0, column=1, padx=10, pady=5)
        name_entry.insert(0, subject['name'])
        ttk.Label(dialog, text="–¢–∏–ø –≥—Ä—É–ø–ø—ã:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        group_type_var = tk.StringVar(value=subject.get('group_type', '–æ—Å–Ω–æ–≤–Ω–æ–µ'))
        group_type_combo = ttk.Combobox(dialog, textvariable=group_type_var, 
                                       values=["–æ—Å–Ω–æ–≤–Ω–æ–µ", "—É–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ", "–≤–µ—á–µ—Ä–Ω–µ–µ"], state="readonly")
        group_type_combo.grid(row=1, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ß–∞—Å–æ–≤/–Ω–µ–¥–µ–ª—é:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        hours_var = tk.StringVar(value=str(subject.get('hours_per_week', 4)))
        hours_spin = ttk.Spinbox(dialog, from_=1, to=20, textvariable=hours_var, width=10)
        hours_spin.grid(row=2, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–§–æ—Ä–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        assessment_var = tk.StringVar(value=subject.get('assessment', '—ç–∫–∑–∞–º–µ–Ω'))
        assessment_combo = ttk.Combobox(dialog, textvariable=assessment_var, 
                                       values=["—ç–∫–∑–∞–º–µ–Ω", "–∑–∞—á–µ—Ç", "–∑–∞—á–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π", "–∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞", "–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞—á–µ—Ç"], 
                                       state="readonly")
        assessment_combo.grid(row=3, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ö–∞—Ñ–µ–¥—Ä–∞:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        department_var = tk.StringVar(value=subject.get('department', ''))
        department_entry = ttk.Entry(dialog, textvariable=department_var, width=35)
        department_entry.grid(row=4, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–û–ø–∏—Å–∞–Ω–∏–µ:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        description_var = tk.StringVar(value=subject.get('description', ''))
        description_entry = ttk.Entry(dialog, textvariable=description_var, width=35)
        description_entry.grid(row=5, column=1, padx=10, pady=5)
        def save_subject():
            if name_entry.get():
                subject['name'] = name_entry.get()
                subject['group_type'] = group_type_var.get()
                subject['hours_per_week'] = int(hours_var.get())
                subject['assessment'] = assessment_var.get()
                subject['department'] = department_var.get()
                subject['description'] = description_var.get()
                self.load_subjects_data()
                dialog.destroy()
                self.create_backup()
            else:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞")
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_subject).grid(row=6, column=0, columnspan=2, pady=20)

    def delete_subject(self):
        selected = self.subjects_tree.selection()
        if selected:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç?"):
                item = self.subjects_tree.item(selected[0])
                subject_id = item['values'][0]
                self.subjects = [s for s in self.subjects if s['id'] != subject_id]
                self.load_subjects_data()
                self.create_backup()
        else:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")

    def generate_schedule_thread(self):
        """–ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.progress.start()
        self.status_var.set("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        threading.Thread(target=self.generate_schedule, daemon=True).start()

    def generate_schedule(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
        try:
            # --- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
            if not hasattr(self, 'groups') or not self.groups:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É")
                self.progress.stop()
                return
            if not hasattr(self, 'subjects') or not self.subjects:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç")
                self.progress.stop()
                return
            if not hasattr(self, 'teachers') or not self.teachers:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
                self.progress.stop()
                return
            if not hasattr(self, 'classrooms') or not self.classrooms:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞—É–¥–∏—Ç–æ—Ä–∏—é")
                self.progress.stop()
                return
            # -------------------------------------------------------
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.settings['days_per_week'] = int(self.days_var.get())
            self.settings['lessons_per_day'] = int(self.lessons_var.get())
            self.settings['weeks'] = int(self.weeks_var.get())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–∞—Ç
            holiday_dates = []
            for h in self.holidays:
                try:
                    holiday_dates.append(datetime.strptime(h['date'], '%Y-%m-%d').date())
                except ValueError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
                    continue

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
            days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞—Ç –≤ –ø–µ—Ä–∏–æ–¥–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            start_date = datetime.strptime(self.settings['start_date'], '%Y-%m-%d').date()
            all_dates = []
            for week in range(self.settings['weeks']):
                for day_index, day_name in enumerate(days):
                    current_date = start_date + timedelta(weeks=week, days=day_index)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º
                    if current_date not in holiday_dates:
                        all_dates.append((week+1, day_name, current_date))

            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            schedule_data = []
            lesson_id = 1
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–≤–æ–Ω–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            bell_schedule_str = self.settings.get('bell_schedule', '8:00-8:45,8:55-9:40,9:50-10:35,10:45-11:30,11:40-12:25,12:35-13:20')
            times = [slot.strip() for slot in bell_schedule_str.split(',')]  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            
            for week_num, day_name, _ in all_dates:
                for time_slot in times:
                    for group in self.groups:
                        schedule_data.append({
                            'id': lesson_id,
                            'week': week_num,
                            'day': day_name,
                            'time': time_slot,
                            'group_id': group['id'],
                            'group_name': group['name'],
                            'subject_id': None,
                            'subject_name': '',
                            'teacher_id': None,
                            'teacher_name': '',
                            'classroom_id': None,
                            'classroom_name': '',
                            'status': '—Å–≤–æ–±–æ–¥–Ω–æ'
                        })
                        lesson_id += 1

            self.schedule = pd.DataFrame(schedule_data)
            
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥—Ä—É–ø–ø–∞–º
            self.assign_subjects_to_groups()
            # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π
            self.assign_teachers_and_classrooms()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.root.after(0, self.on_schedule_generated)
        
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"))
            self.root.after(0, self.progress.stop)

    def assign_subjects_to_groups(self):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≥—Ä—É–ø–ø–∞–º"""
        # --- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ ---
        if not hasattr(self, 'subjects') or not self.subjects:
            print("–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.")
            return
        if not hasattr(self, 'groups') or not self.groups:
            print("–ù–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return
        # -----------------------------------------------
        for group in self.groups:
            group_subjects = [s for s in self.subjects if s.get('group_type') in [group['type'], '–æ–±—â–∏–π']]
            for subject in group_subjects:
                hours_per_week = subject.get('hours_per_week', 0)
                if hours_per_week <= 0:
                    continue
                # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                free_slots = self.schedule[
                    (self.schedule['group_id'] == group['id']) & 
                    (self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ')
                ].index
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
                if len(free_slots) >= hours_per_week:
                    selected_slots = random.sample(list(free_slots), hours_per_week)
                    for slot in selected_slots:
                        self.schedule.loc[slot, 'subject_id'] = subject['id']
                        self.schedule.loc[slot, 'subject_name'] = subject['name']
                        self.schedule.loc[slot, 'status'] = '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' 
                else:
                    print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject['name']} —É –≥—Ä—É–ø–ø—ã {group['name']}")

    def assign_teachers_and_classrooms(self):
        """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π"""
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é
        for idx, lesson in self.schedule.iterrows():
            if lesson['status'] == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ':
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
                subject = next((s for s in self.subjects if s['id'] == lesson['subject_id']), None)
                if subject:
                    available_teachers = [t for t in self.teachers if subject['name'] in t['subjects']]
                    if available_teachers:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                        teacher = random.choice(available_teachers)
                        self.schedule.loc[idx, 'teacher_id'] = teacher['id']
                        self.schedule.loc[idx, 'teacher_name'] = teacher['name']
                        # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
                        if self.classrooms:
                            classroom = random.choice(self.classrooms)
                            self.schedule.loc[idx, 'classroom_id'] = classroom['id']
                            self.schedule.loc[idx, 'classroom_name'] = classroom['name']
                        self.schedule.loc[idx, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'

    def on_schedule_generated(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        self.progress.stop()
        self.status_var.set("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
        self.filter_schedule()
        self.update_reports()
        self.create_backup()

    def filter_schedule(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        self.schedule_tree.delete(*self.schedule_tree.get_children())
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        week_text = self.week_var.get()
        week_num = int(week_text.split()[1]) if week_text and "–ù–µ–¥–µ–ª—è" in week_text else 1
        group_name = self.group_filter_var.get()
        teacher_name = self.teacher_filter_var.get()
        classroom_name = self.classroom_filter_var.get()
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_schedule = self.schedule.copy()
        if not filtered_schedule.empty and 'week' in filtered_schedule.columns:
            if week_num:
                filtered_schedule = filtered_schedule[filtered_schedule['week'] == week_num]
            if group_name:
                filtered_schedule = filtered_schedule[filtered_schedule['group_name'] == group_name]
            if teacher_name:
                filtered_schedule = filtered_schedule[filtered_schedule['teacher_name'] == teacher_name]
            if classroom_name:
                filtered_schedule = filtered_schedule[filtered_schedule['classroom_name'] == classroom_name]
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            if not filtered_schedule.empty:
                days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
                times = sorted(filtered_schedule['time'].unique())
                for time_slot in times:
                    row_data = [time_slot]
                    day_lessons = {}
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
                    for day in days:
                        lesson = filtered_schedule[
                            (filtered_schedule['time'] == time_slot) & 
                            (filtered_schedule['day'] == day) & 
                            (filtered_schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                        ]
                        if not lesson.empty:
                            lesson_info = lesson.iloc[0]
                            day_lessons[day] = f"{lesson_info['group_name']}\n{lesson_info['subject_name']}\n{lesson_info['teacher_name']}\n{lesson_info['classroom_name']}"
                        else:
                            day_lessons[day] = ""
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
                    for day in days:
                        row_data.append(day_lessons.get(day, ""))
                    self.schedule_tree.insert('', tk.END, values=row_data)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                self.show_empty_schedule()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
            self.show_empty_schedule()

    def show_empty_schedule(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        for time_slot in times:
            row_data = [time_slot] + [''] * len(days)
            self.schedule_tree.insert('', tk.END, values=row_data)

    # --- –ù–ê–ß–ê–õ–û –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –†–£–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê ---

    def add_lesson(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é"""
        if not self.groups or not self.subjects or not self.teachers or not self.classrooms:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞, –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç, –æ–¥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –æ–¥–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
        dialog.geometry("500x400")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        ttk.Label(dialog, text="–ù–µ–¥–µ–ª—è:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        week_var = tk.StringVar(value="1")
        week_combo = ttk.Combobox(dialog, textvariable=week_var, values=[str(i) for i in range(1, self.settings['weeks'] + 1)], state="readonly", width=5)
        week_combo.grid(row=0, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        day_var = tk.StringVar()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        day_combo = ttk.Combobox(dialog, textvariable=day_var, values=days, state="readonly", width=15)
        day_combo.grid(row=1, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–í—Ä–µ–º—è:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        time_var = tk.StringVar()
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        time_combo = ttk.Combobox(dialog, textvariable=time_var, values=times, state="readonly", width=15)
        time_combo.grid(row=2, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ì—Ä—É–ø–ø–∞:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        group_var = tk.StringVar()
        group_names = [g['name'] for g in self.groups]
        group_combo = ttk.Combobox(dialog, textvariable=group_var, values=group_names, state="readonly", width=30)
        group_combo.grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        subject_var = tk.StringVar()
        subject_names = [s['name'] for s in self.subjects]
        subject_combo = ttk.Combobox(dialog, textvariable=subject_var, values=subject_names, state="readonly", width=30)
        subject_combo.grid(row=4, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        teacher_var = tk.StringVar()
        teacher_names = [t['name'] for t in self.teachers]
        teacher_combo = ttk.Combobox(dialog, textvariable=teacher_var, values=teacher_names, state="readonly", width=30)
        teacher_combo.grid(row=5, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ê—É–¥–∏—Ç–æ—Ä–∏—è:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        classroom_var = tk.StringVar()
        classroom_names = [c['name'] for c in self.classrooms]
        classroom_combo = ttk.Combobox(dialog, textvariable=classroom_var, values=classroom_names, state="readonly", width=30)
        classroom_combo.grid(row=6, column=1, sticky=tk.W, padx=10, pady=5)

        def save_lesson():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if not all([week_var.get(), day_var.get(), time_var.get(), group_var.get(), subject_var.get(), teacher_var.get(), classroom_var.get()]):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ –∏–º–µ–Ω–∞–º
            selected_group = next((g for g in self.groups if g['name'] == group_var.get()), None)
            selected_subject = next((s for s in self.subjects if s['name'] == subject_var.get()), None)
            selected_teacher = next((t for t in self.teachers if t['name'] == teacher_var.get()), None)
            selected_classroom = next((c for c in self.classrooms if c['name'] == classroom_var.get()), None)

            if not all([selected_group, selected_subject, selected_teacher, selected_classroom]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô ---
            is_valid, error_message = self.validate_teacher_constraints(selected_teacher['id'], day_var.get(), int(week_var.get()))
            if not is_valid:
                messagebox.showerror("–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", error_message)
                return
            # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò ---
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ —Å–ª–æ—Ç
            existing_lesson = self.schedule[
                (self.schedule['week'] == int(week_var.get())) &
                (self.schedule['day'] == day_var.get()) &
                (self.schedule['time'] == time_var.get()) &
                (self.schedule['group_id'] == selected_group['id']) &
                (self.schedule['status'] != '—Å–≤–æ–±–æ–¥–Ω–æ')
            ]

            if not existing_lesson.empty:
                if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —É–∂–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–µ. –ó–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?"):
                    return

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            target_row = self.schedule[
                (self.schedule['week'] == int(week_var.get())) &
                (self.schedule['day'] == day_var.get()) &
                (self.schedule['time'] == time_var.get()) &
                (self.schedule['group_id'] == selected_group['id'])
            ]

            if not target_row.empty:
                idx = target_row.index[0]
                self.schedule.loc[idx, 'subject_id'] = selected_subject['id']
                self.schedule.loc[idx, 'subject_name'] = selected_subject['name']
                self.schedule.loc[idx, 'teacher_id'] = selected_teacher['id']
                self.schedule.loc[idx, 'teacher_name'] = selected_teacher['name']
                self.schedule.loc[idx, 'classroom_id'] = selected_classroom['id']
                self.schedule.loc[idx, 'classroom_name'] = selected_classroom['name']
                self.schedule.loc[idx, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'

                self.filter_schedule()
                self.update_reports()
                self.create_backup()
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
                dialog.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏")

        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_lesson).grid(row=7, column=0, columnspan=2, pady=20)

    def edit_lesson(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        selected_item = self.schedule_tree.selection()
        if not selected_item:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        values = self.schedule_tree.item(selected_item[0], 'values')
        time_slot = values[0]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –≤—Ä–µ–º—è

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –¥–µ–Ω—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        week_text = self.week_var.get()
        current_week = int(week_text.split()[1]) if week_text and "–ù–µ–¥–µ–ª—è" in week_text else 1
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]

        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ (–Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        current_day = None
        for i, day in enumerate(days):
            if values[i + 1].strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤—Ä–µ–º–µ–Ω–∏ (–∏–Ω–¥–µ–∫—Å 0)
                current_day = day
                break

        if not current_day:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ DataFrame
        lesson_row = self.schedule[
            (self.schedule['week'] == current_week) &
            (self.schedule['day'] == current_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]

        if lesson_row.empty:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        idx = lesson_row.index[0]
        lesson_data = self.schedule.loc[idx]

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ add_lesson, –Ω–æ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º)
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ")
        dialog.geometry("500x400")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        ttk.Label(dialog, text="–ù–µ–¥–µ–ª—è:").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        week_var = tk.StringVar(value=str(current_week))
        week_combo = ttk.Combobox(dialog, textvariable=week_var, values=[str(i) for i in range(1, self.settings['weeks'] + 1)], state="readonly", width=5)
        week_combo.grid(row=0, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        day_var = tk.StringVar(value=current_day)
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        day_combo = ttk.Combobox(dialog, textvariable=day_var, values=days, state="readonly", width=15)
        day_combo.grid(row=1, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–í—Ä–µ–º—è:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        time_var = tk.StringVar(value=time_slot)
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        time_combo = ttk.Combobox(dialog, textvariable=time_var, values=times, state="readonly", width=15)
        time_combo.grid(row=2, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ì—Ä—É–ø–ø–∞:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        group_var = tk.StringVar(value=lesson_data['group_name'])
        group_names = [g['name'] for g in self.groups]
        group_combo = ttk.Combobox(dialog, textvariable=group_var, values=group_names, state="readonly", width=30)
        group_combo.grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        subject_var = tk.StringVar(value=lesson_data['subject_name'])
        subject_names = [s['name'] for s in self.subjects]
        subject_combo = ttk.Combobox(dialog, textvariable=subject_var, values=subject_names, state="readonly", width=30)
        subject_combo.grid(row=4, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        teacher_var = tk.StringVar(value=lesson_data['teacher_name'])
        teacher_names = [t['name'] for t in self.teachers]
        teacher_combo = ttk.Combobox(dialog, textvariable=teacher_var, values=teacher_names, state="readonly", width=30)
        teacher_combo.grid(row=5, column=1, sticky=tk.W, padx=10, pady=5)

        ttk.Label(dialog, text="–ê—É–¥–∏—Ç–æ—Ä–∏—è:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        classroom_var = tk.StringVar(value=lesson_data['classroom_name'])
        classroom_names = [c['name'] for c in self.classrooms]
        classroom_combo = ttk.Combobox(dialog, textvariable=classroom_var, values=classroom_names, state="readonly", width=30)
        classroom_combo.grid(row=6, column=1, sticky=tk.W, padx=10, pady=5)

        def save_lesson():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if not all([week_var.get(), day_var.get(), time_var.get(), group_var.get(), subject_var.get(), teacher_var.get(), classroom_var.get()]):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ –∏–º–µ–Ω–∞–º
            selected_group = next((g for g in self.groups if g['name'] == group_var.get()), None)
            selected_subject = next((s for s in self.subjects if s['name'] == subject_var.get()), None)
            selected_teacher = next((t for t in self.teachers if t['name'] == teacher_var.get()), None)
            selected_classroom = next((c for c in self.classrooms if c['name'] == classroom_var.get()), None)

            if not all([selected_group, selected_subject, selected_teacher, selected_classroom]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞/–≤—Ä–µ–º—è –º–µ–Ω—è—é—Ç—Å—è)
            if (group_var.get() != lesson_data['group_name'] or
                week_var.get() != str(current_week) or
                day_var.get() != current_day or
                time_var.get() != time_slot):

                conflict_check = self.schedule[
                    (self.schedule['week'] == int(week_var.get())) &
                    (self.schedule['day'] == day_var.get()) &
                    (self.schedule['time'] == time_var.get()) &
                    (self.schedule['group_id'] == selected_group['id']) &
                    (self.schedule['status'] != '—Å–≤–æ–±–æ–¥–Ω–æ')
                ]

                if not conflict_check.empty:
                    if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —É–∂–µ –µ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–µ. –ó–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?"):
                        return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
            self.schedule.loc[idx, 'week'] = int(week_var.get())
            self.schedule.loc[idx, 'day'] = day_var.get()
            self.schedule.loc[idx, 'time'] = time_var.get()
            self.schedule.loc[idx, 'group_id'] = selected_group['id']
            self.schedule.loc[idx, 'group_name'] = selected_group['name']
            self.schedule.loc[idx, 'subject_id'] = selected_subject['id']
            self.schedule.loc[idx, 'subject_name'] = selected_subject['name']
            self.schedule.loc[idx, 'teacher_id'] = selected_teacher['id']
            self.schedule.loc[idx, 'teacher_name'] = selected_teacher['name']
            self.schedule.loc[idx, 'classroom_id'] = selected_classroom['id']
            self.schedule.loc[idx, 'classroom_name'] = selected_classroom['name']

            self.filter_schedule()
            self.update_reports()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            dialog.destroy()

        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_lesson).grid(row=7, column=0, columnspan=2, pady=20)

    def delete_lesson(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        selected_item = self.schedule_tree.selection()
        if not selected_item:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        values = self.schedule_tree.item(selected_item[0], 'values')
        time_slot = values[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –¥–µ–Ω—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        week_text = self.week_var.get()
        current_week = int(week_text.split()[1]) if week_text and "–ù–µ–¥–µ–ª—è" in week_text else 1
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]

        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        current_day = None
        for i, day in enumerate(days):
            if values[i + 1].strip():
                current_day = day
                break

        if not current_day:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ DataFrame
        lesson_row = self.schedule[
            (self.schedule['week'] == current_week) &
            (self.schedule['day'] == current_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]

        if lesson_row.empty:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ?"):
            idx = lesson_row.index[0]
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ '—Å–≤–æ–±–æ–¥–Ω–æ'
            self.schedule.loc[idx, ['subject_id', 'subject_name', 'teacher_id', 'teacher_name', 'classroom_id', 'classroom_name']] = [None, '', None, '', None, '']
            self.schedule.loc[idx, 'status'] = '—Å–≤–æ–±–æ–¥–Ω–æ'

            self.filter_schedule()
            self.update_reports()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

    # --- –ö–û–ù–ï–¶ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –†–£–ß–ù–û–ì–û –†–ï–ñ–ò–ú–ê ---

    def substitute_lesson(self):
        """–ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏"""
        selected_item = self.schedule_tree.selection()
        if not selected_item:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–ª—è –∑–∞–º–µ–Ω—ã")
            return
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        values = self.schedule_tree.item(selected_item[0], 'values')
        time_slot = values[0]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –≤—Ä–µ–º—è
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é –∏ –¥–µ–Ω—å –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        week_text = self.week_var.get()
        current_week = int(week_text.split()[1]) if week_text and "–ù–µ–¥–µ–ª—è" in week_text else 1
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        current_day = None
        for i, day in enumerate(days):
            if values[i + 1].strip():
                current_day = day
                break
        if not current_day:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–Ω—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –≤ DataFrame
        lesson_row = self.schedule[
            (self.schedule['week'] == current_week) &
            (self.schedule['day'] == current_day) &
            (self.schedule['time'] == time_slot) &
            (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
        ]
        if lesson_row.empty:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        idx = lesson_row.index[0]
        lesson_data = self.schedule.loc[idx]
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
        dialog = tk.Toplevel(self.root)
        dialog.title("–ó–∞–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è")
        dialog.geometry("500x400")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
        ttk.Label(dialog, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏:", font=('Arial', 10, 'bold')).grid(row=0, column=0, columnspan=2, sticky=tk.W, padx=10, pady=(10, 5))
        ttk.Label(dialog, text=f"–ì—Ä—É–ø–ø–∞: {lesson_data['group_name']}").grid(row=1, column=0, columnspan=2, sticky=tk.W, padx=10)
        ttk.Label(dialog, text=f"–ü—Ä–µ–¥–º–µ—Ç: {lesson_data['subject_name']}").grid(row=2, column=0, columnspan=2, sticky=tk.W, padx=10)
        ttk.Label(dialog, text=f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson_data['teacher_name']}").grid(row=3, column=0, columnspan=2, sticky=tk.W, padx=10)
        ttk.Label(dialog, text=f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson_data['classroom_name']}").grid(row=4, column=0, columnspan=2, sticky=tk.W, padx=10)
        ttk.Label(dialog, text=f"–í—Ä–µ–º—è: {time_slot}, {current_day}, –ù–µ–¥–µ–ª—è {current_week}").grid(row=5, column=0, columnspan=2, sticky=tk.W, padx=10)
        ttk.Separator(dialog, orient='horizontal').grid(row=6, column=0, columnspan=2, sticky='ew', padx=10, pady=10)
        # –í—ã–±–æ—Ä –∑–∞–º–µ–Ω—è—é—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        ttk.Label(dialog, text="–ó–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=7, column=0, sticky=tk.W, padx=10, pady=5)
        replacement_teacher_var = tk.StringVar()
        teacher_names = [t['name'] for t in self.teachers if t['name'] != lesson_data['teacher_name']]  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ
        if not teacher_names:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–º–µ–Ω—ã")
            dialog.destroy()
            return
        teacher_combo = ttk.Combobox(dialog, textvariable=replacement_teacher_var, values=teacher_names, state="readonly", width=30)
        teacher_combo.grid(row=7, column=1, sticky=tk.W, padx=10, pady=5)
        # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã
        ttk.Label(dialog, text="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã:").grid(row=8, column=0, sticky=tk.W, padx=10, pady=5)
        reason_var = tk.StringVar()
        reason_combo = ttk.Combobox(dialog, textvariable=reason_var, 
                                   values=["–ë–æ–ª–µ–∑–Ω—å", "–û—Ç–ø—É—Å–∫", "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "–î—Ä—É–≥–æ–µ"], state="readonly", width=30)
        reason_combo.grid(row=8, column=1, sticky=tk.W, padx=10, pady=5)
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è "–î—Ä—É–≥–æ–µ"
        ttk.Label(dialog, text="–î–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ '–î—Ä—É–≥–æ–µ'):").grid(row=9, column=0, sticky=tk.W, padx=10, pady=5)
        details_entry = ttk.Entry(dialog, width=30)
        details_entry.grid(row=9, column=1, sticky=tk.W, padx=10, pady=5)
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è
        is_temporary_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(dialog, text="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ (–≤–µ—Ä–Ω—É—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∑–∂–µ)", 
                       variable=is_temporary_var).grid(row=10, column=0, columnspan=2, sticky=tk.W, padx=10, pady=5)
        def save_substitution():
            if not replacement_teacher_var.get():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—è—é—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
                return
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            new_teacher = next((t for t in self.teachers if t['name'] == replacement_teacher_var.get()), None)
            if not new_teacher:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
                return
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
            reason = reason_var.get()
            if reason == "–î—Ä—É–≥–æ–µ":
                reason = details_entry.get() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            original_teacher_id = self.schedule.loc[idx, 'teacher_id']
            original_teacher_name = self.schedule.loc[idx, 'teacher_name']
            self.schedule.loc[idx, 'teacher_id'] = new_teacher['id']
            self.schedule.loc[idx, 'teacher_name'] = new_teacher['name']
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—É –≤ –∂—É—Ä–Ω–∞–ª
            substitution_record = {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'week': current_week,
                'day': current_day,
                'time': time_slot,
                'group': lesson_data['group_name'],
                'subject': lesson_data['subject_name'],
                'original_teacher': original_teacher_name,
                'replacement_teacher': new_teacher['name'],
                'reason': reason,
                'is_temporary': is_temporary_var.get(),
                'original_teacher_id': original_teacher_id,  # –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
                'schedule_index': int(idx)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ DataFrame –¥–ª—è –æ—Ç–º–µ–Ω—ã
            }
            self.substitutions.append(substitution_record)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.filter_schedule()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ!\n–ù–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {new_teacher['name']}")
            dialog.destroy()
        ttk.Button(dialog, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É", command=save_substitution).grid(row=11, column=0, columnspan=2, pady=20)

    def show_calendar(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        dialog = tk.Toplevel(self.root)
        dialog.title("–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        dialog.geometry("600x500")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now()
        year = today.year
        month = today.month
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_frame = ttk.Frame(dialog)
        nav_frame.pack(fill=tk.X, padx=10, pady=10)
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prev_button = ttk.Button(nav_frame, text="‚óÄ –ù–∞–∑–∞–¥", command=lambda: self.change_month(dialog, year, month-1))
        prev_button.pack(side=tk.LEFT)
        month_label = ttk.Label(nav_frame, text=f"{calendar.month_name[month]} {year}", font=('Arial', 14, 'bold'))
        month_label.pack(side=tk.LEFT, padx=20)
        next_button = ttk.Button(nav_frame, text="–í–ø–µ—Ä–µ–¥ ‚ñ∂", command=lambda: self.change_month(dialog, year, month+1))
        next_button.pack(side=tk.RIGHT)
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        cal_frame = ttk.Frame(dialog)
        cal_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for i, day in enumerate(days):
            ttk.Label(cal_frame, text=day, font=('Arial', 10, 'bold')).grid(row=0, column=i, padx=5, pady=5)
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        cal = calendar.monthcalendar(year, month)
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        for week_num, week in enumerate(cal):
            for day_num, day in enumerate(week):
                if day == 0:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                    ttk.Label(cal_frame, text="", width=8, anchor='center').grid(row=week_num+1, column=day_num, padx=2, pady=2)
                else:
                    # –Ø—á–µ–π–∫–∞ —Å –¥–∞—Ç–æ–π
                    date_str = f"{year}-{month:02d}-{day:02d}"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç–∏—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                    day_schedule = self.schedule[
                        (self.schedule['week'] == 1) &  # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é
                        (self.schedule['day'] == days[day_num]) &
                        (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                    ]
                    if not day_schedule.empty:
                        # –ï—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è - –≤—ã–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–º
                        day_button = tk.Button(cal_frame, text=str(day), width=8, 
                                              bg='#2ecc71', fg='white', 
                                              command=lambda d=date_str: self.show_day_schedule(d))
                    else:
                        # –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π
                        day_button = tk.Button(cal_frame, text=str(day), width=8, 
                                              command=lambda d=date_str: self.show_day_schedule(d))
                    day_button.grid(row=week_num+1, column=day_num, padx=2, pady=2)

    def change_month(self, dialog, year, month):
        """–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
        dialog.destroy()
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å –Ω–æ–≤—ã–º –º–µ—Å—è—Ü–µ–º
        self.show_calendar()

    def show_day_schedule(self, date):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
        messagebox.showinfo("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –∑–¥–µ—Å—å")

    def check_conflicts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        if self.schedule.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if 'teacher_id' in self.schedule.columns:
            teacher_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['teacher_id', 'day', 'time', 'week'], keep=False))
            ]
        else:
            teacher_conflicts = pd.DataFrame()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–π
        if 'classroom_id' in self.schedule.columns:
            classroom_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['classroom_id', 'day', 'time', 'week'], keep=False))
            ]
        else:
            classroom_conflicts = pd.DataFrame()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≥—Ä—É–ø–ø
        if 'group_id' in self.schedule.columns:
            group_conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['group_id', 'day', 'time', 'week'], keep=False))
            ]
        else:
            group_conflicts = pd.DataFrame()
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        conflict_text = f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teacher_conflicts)}\n"
        conflict_text += f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–π: {len(classroom_conflicts)}\n"
        conflict_text += f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≥—Ä—É–ø–ø: {len(group_conflicts)}\n"
        if not teacher_conflicts.empty:
            conflict_text += "–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n"
            for _, conflict in teacher_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['teacher_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        if not classroom_conflicts.empty:
            conflict_text += "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∞—É–¥–∏—Ç–æ—Ä–∏–π:\n"
            for _, conflict in classroom_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['classroom_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        if not group_conflicts.empty:
            conflict_text += "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≥—Ä—É–ø–ø:\n"
            for _, conflict in group_conflicts.head(10).iterrows():
                conflict_text += f"  {conflict['group_name']} - {conflict['day']} {conflict['time']} (–Ω–µ–¥–µ–ª—è {conflict['week']})\n"
        self.conflicts_text.delete(1.0, tk.END)
        self.conflicts_text.insert(1.0, conflict_text)
        messagebox.showinfo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤", 
                           f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:\n"
                           f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(teacher_conflicts)}\n"
                           f"–ê—É–¥–∏—Ç–æ—Ä–∏–π: {len(classroom_conflicts)}\n"
                           f"–ì—Ä—É–ø–ø: {len(group_conflicts)}")

    def optimize_schedule(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if self.schedule.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        self.progress.start()
        self.status_var.set("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
        if 'teacher_id' in self.schedule.columns:
            conflicts = self.schedule[
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ') &
                (self.schedule.duplicated(['teacher_id', 'day', 'time', 'week'], keep=False))
            ]
        else:
            conflicts = pd.DataFrame()
        optimized_count = 0
        for idx in conflicts.index[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            # –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ —Ç–æ–π –∂–µ –Ω–µ–¥–µ–ª–µ
            group_id = self.schedule.loc[idx, 'group_id']
            week = self.schedule.loc[idx, 'week']
            free_slots = self.schedule[
                (self.schedule['group_id'] == group_id) & 
                (self.schedule['week'] == week) & 
                (self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ')
            ].index
            if len(free_slots) > 0:
                new_slot = random.choice(free_slots)
                # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—ã–π —Å–ª–æ—Ç
                self.schedule.loc[new_slot, 'subject_id'] = self.schedule.loc[idx, 'subject_id']
                self.schedule.loc[new_slot, 'subject_name'] = self.schedule.loc[idx, 'subject_name']
                self.schedule.loc[new_slot, 'teacher_id'] = self.schedule.loc[idx, 'teacher_id']
                self.schedule.loc[new_slot, 'teacher_name'] = self.schedule.loc[idx, 'teacher_name']
                self.schedule.loc[new_slot, 'classroom_id'] = self.schedule.loc[idx, 'classroom_id']
                self.schedule.loc[new_slot, 'classroom_name'] = self.schedule.loc[idx, 'classroom_name']
                self.schedule.loc[new_slot, 'status'] = '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
                self.schedule.loc[idx, ['subject_id', 'subject_name', 'teacher_id', 'teacher_name', 
                                      'classroom_id', 'classroom_name']] = [None, '', None, '', None, '']
                self.schedule.loc[idx, 'status'] = '—Å–≤–æ–±–æ–¥–Ω–æ'
                optimized_count += 1
        self.progress.stop()
        self.status_var.set("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        messagebox.showinfo("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {optimized_count} –∑–∞–Ω—è—Ç–∏–π")
        self.filter_schedule()
        self.update_reports()
        self.create_backup()

    def update_reports(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤"""
        if self.schedule.empty:
            return
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        self.teacher_report_tree.delete(*self.teacher_report_tree.get_children())
        self.group_report_tree.delete(*self.group_report_tree.get_children())
        self.summary_text.delete(1.0, tk.END)
        # –ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        if 'teacher_name' in self.schedule.columns and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
            teacher_load = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size()
            for teacher, hours in teacher_load.items():
                # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                teacher_data = self.schedule[
                    (self.schedule['teacher_name'] == teacher) & 
                    (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                ]
                groups = ', '.join(teacher_data['group_name'].unique())
                subjects = ', '.join(teacher_data['subject_name'].unique())
                self.teacher_report_tree.insert('', tk.END, values=(teacher, hours, groups, subjects))
        # –ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø
        if 'group_name' in self.schedule.columns and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
            group_load = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size()
            for group, hours in group_load.items():
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
                group_data = self.schedule[
                    (self.schedule['group_name'] == group) & 
                    (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
                ]
                subjects = ', '.join(group_data['subject_name'].unique())
                teachers = ', '.join(group_data['teacher_name'].unique())
                self.group_report_tree.insert('', tk.END, values=(group, hours, subjects, teachers))
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        summary_text = f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
        summary_text += f"–£—á—Ä–µ–∂–¥–µ–Ω–∏–µ: {self.settings.get('school_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {self.settings.get('start_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        summary_text += f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {self.settings.get('weeks', 0)} –Ω–µ–¥–µ–ª—å\n"
        summary_text += f"üìÖ –î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é: {self.settings.get('days_per_week', 0)}\n"
        summary_text += f"üìÖ –ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å: {self.settings.get('lessons_per_day', 0)}\n"
        summary_text += f"üë• –ì—Ä—É–ø–ø: {len(self.groups)}\n"
        summary_text += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {len(self.teachers)}\n"
        summary_text += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–π: {len(self.classrooms)}\n"
        summary_text += f"üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: {len(self.subjects)}\n"
        summary_text += f"üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π: {len(self.holidays)}\n"
        if not self.schedule.empty:
            confirmed_lessons = len(self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'])
            planned_lessons = len(self.schedule[self.schedule['status'] == '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'])
            free_slots = len(self.schedule[self.schedule['status'] == '—Å–≤–æ–±–æ–¥–Ω–æ'])
            summary_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {confirmed_lessons}\n"
            summary_text += f"üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {planned_lessons}\n"
            summary_text += f"üïí –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: {free_slots}\n"
        self.summary_text.insert(1.0, summary_text)

    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        if self.schedule.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return
        filename = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫"
        )
        if filename:
            try:
                with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    if not self.schedule.empty:
                        confirmed_schedule = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ']
                        if not confirmed_schedule.empty:
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –≤–º–µ—Å—Ç–æ —Å–≤–æ–¥–Ω–æ–π
                            confirmed_schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ
                            self.schedule.to_excel(writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                    else:
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É
                        pd.DataFrame(columns=['id', 'week', 'day', 'time', 'group_id', 'group_name', 
                                            'subject_id', 'subject_name', 'teacher_id', 'teacher_name', 
                                            'classroom_id', 'classroom_name', 'status']).to_excel(
                            writer, sheet_name='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', index=False)
                    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    pd.DataFrame(self.groups).to_excel(writer, sheet_name='–ì—Ä—É–ø–ø—ã', index=False)
                    pd.DataFrame(self.teachers).to_excel(writer, sheet_name='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', index=False)
                    pd.DataFrame(self.classrooms).to_excel(writer, sheet_name='–ê—É–¥–∏—Ç–æ—Ä–∏–∏', index=False)
                    pd.DataFrame(self.subjects).to_excel(writer, sheet_name='–ü—Ä–µ–¥–º–µ—Ç—ã', index=False)
                    pd.DataFrame(self.holidays).to_excel(writer, sheet_name='–ü—Ä–∞–∑–¥–Ω–∏–∫–∏', index=False)
                    # –û—Ç—á–µ—Ç—ã
                    if not self.schedule.empty and not self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].empty:
                        teacher_report = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').agg({
                            'group_name': lambda x: ', '.join(x.unique()),
                            'subject_name': lambda x: ', '.join(x.unique())
                        }).reset_index()
                        teacher_report.columns = ['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ì—Ä—É–ø–ø—ã', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                        teacher_report['–ß–∞—Å—ã'] = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('teacher_name').size().values
                        teacher_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π', index=False)
                        group_report = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').agg({
                            'teacher_name': lambda x: ', '.join(x.unique()),
                            'subject_name': lambda x: ', '.join(x.unique())
                        }).reset_index()
                        group_report.columns = ['–ì—Ä—É–ø–ø–∞', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏', '–ü—Ä–µ–¥–º–µ—Ç—ã']
                        group_report['–ß–∞—Å—ã'] = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ'].groupby('group_name').size().values
                        group_report.to_excel(writer, sheet_name='–ù–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø', index=False)
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {filename}")
                self.create_backup()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

    def export_to_html(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ HTML –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ"""
        if self.schedule.empty:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return

        filename = filedialog.asksaveasfilename(
            defaultextension=".html",
            filetypes=[("HTML files", "*.html"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ HTML"
        )
        if not filename:
            return

        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            confirmed_schedule = self.schedule[self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ']
            if confirmed_schedule.empty:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã
            unique_groups = confirmed_schedule['group_name'].unique()
            unique_groups.sort()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
            html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π - {self.settings.get('school_name', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f7fa;
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
        }}
        .header p {{
            margin: 10px 0 0;
            font-size: 1.2em;
        }}
        .info {{
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }}
        .schedule-container {{
            display: flex;
            flex-wrap: wrap;
            gap: 30px;
            justify-content: center;
        }}
        .schedule-table {{
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            overflow: hidden;
            flex: 1 1 450px;
            min-width: 300px;
        }}
        .schedule-title {{
            background-color: #2c3e50;
            color: white;
            padding: 15px;
            text-align: center;
            font-weight: bold;
            font-size: 1.3em;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
        }}
        th, td {{
            padding: 12px;
            text-align: center;
            border: 1px solid #e0e0e0;
        }}
        th {{
            background-color: #34495e;
            color: white;
            font-weight: bold;
        }}
        tr:nth-child(even) {{
            background-color: #f8f9fa;
        }}
        tr:hover {{
            background-color: #e3f2fd;
        }}
        .lesson-info {{
            font-size: 0.9em;
        }}
        .no-lesson {{
            color: #95a5a6;
            font-style: italic;
        }}
        .footer {{
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #7f8c8d;
            font-size: 0.9em;
            border-top: 1px solid #ecf0f1;
        }}
        @media (max-width: 768px) {{
            .schedule-container {{
                flex-direction: column;
            }}
            body {{
                padding: 10px;
            }}
            .header h1 {{
                font-size: 2em;
            }}
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</h1>
        <p>{self.settings.get('school_name', '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ')}</p>
        <p>–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
    </div>

    <div class="info">
        <p><strong>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:</strong> {len(unique_groups)}</p>
        <p><strong>–ü–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:</strong> {self.settings.get('weeks', 0)} –Ω–µ–¥–µ–ª—å</p>
        <p><strong>–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:</strong> {self.settings.get('days_per_week', 0)}</p>
        <p><strong>–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:</strong> {self.settings.get('lessons_per_day', 0)}</p>
    </div>

    <div class="schedule-container">
"""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
            for group_name in unique_groups:
                group_schedule = confirmed_schedule[confirmed_schedule['group_name'] == group_name]
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
                days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
                times = sorted(group_schedule['time'].unique())

                html_content += f"""
        <div class="schedule-table">
            <div class="schedule-title">–ì—Ä—É–ø–ø–∞: {group_name}</div>
            <table>
                <thead>
                    <tr>
                        <th>–í—Ä–µ–º—è</th>
                        {''.join(f'<th>{day}</th>' for day in days)}
                    </tr>
                </thead>
                <tbody>
"""

                for time_slot in times:
                    html_content += f"                    <tr>\n                        <td><strong>{time_slot}</strong></td>\n"
                    for day in days:
                        lesson = group_schedule[
                            (group_schedule['time'] == time_slot) & 
                            (group_schedule['day'] == day)
                        ]
                        if not lesson.empty:
                            lesson_info = lesson.iloc[0]
                            lesson_html = f"{lesson_info['subject_name']}<br><span class='lesson-info'>{lesson_info['teacher_name']}<br>{lesson_info['classroom_name']}</span>"
                        else:
                            lesson_html = "<span class='no-lesson'>‚Äî</span>"
                        html_content += f"                        <td>{lesson_html}</td>\n"
                    html_content += "                    </tr>\n"

                html_content += """                </tbody>
            </table>
        </div>
"""

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ç–µ—Ä
            html_content += f"""
    </div>

    <div class="footer">
        <p>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
        <p>–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω')}</p>
    </div>
</body>
</html>
"""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-—Ñ–∞–π–ª
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)

            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ HTML-—Ñ–∞–π–ª:\n{filename}")
            self.create_backup() # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ HTML: {str(e)}")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        data = {
            'settings': self.settings,
            'groups': self.groups,
            'teachers': self.teachers,
            'classrooms': self.classrooms,
            'subjects': self.subjects,
            'substitutions': self.substitutions,
            'holidays': self.holidays
        }
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫"
        )
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                self.create_backup() # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
        )
        if filename and os.path.exists(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                self.settings = data.get('settings', self.settings)
                self.groups = data.get('groups', [])
                self.teachers = data.get('teachers', [])
                self.classrooms = data.get('classrooms', [])
                self.subjects = data.get('subjects', [])
                self.substitutions = data.get('substitutions', [])
                self.holidays = data.get('holidays', [])
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                self.load_groups_data()
                self.load_teachers_data()
                self.load_classrooms_data()
                self.load_subjects_data()
                self.load_holidays_data()
                messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                self.create_backup()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        dialog = tk.Toplevel(self.root)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        dialog.geometry("550x600")  # –£–≤–µ–ª–∏—á–∏–ª —à–∏—Ä–∏–Ω—É –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        main_frame = ttk.Frame(dialog, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # === –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ===
        basic_frame = ttk.LabelFrame(main_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        basic_frame.grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(basic_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        school_name_var = tk.StringVar(value=self.settings.get('school_name', ''))
        school_name_entry = ttk.Entry(basic_frame, textvariable=school_name_var, width=40)
        school_name_entry.grid(row=0, column=1, padx=5, pady=2)
        
        ttk.Label(basic_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        director_var = tk.StringVar(value=self.settings.get('director', ''))
        director_entry = ttk.Entry(basic_frame, textvariable=director_var, width=40)
        director_entry.grid(row=1, column=1, padx=5, pady=2)
        
        ttk.Label(basic_frame, text="–£—á–µ–±–Ω—ã–π –≥–æ–¥:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        academic_year_var = tk.StringVar(value=self.settings.get('academic_year', ''))
        academic_year_entry = ttk.Entry(basic_frame, textvariable=academic_year_var, width=40)
        academic_year_entry.grid(row=2, column=1, padx=5, pady=2)
        
        ttk.Label(basic_frame, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞:").grid(row=3, column=0, sticky=tk.W, padx=5, pady=2)
        start_date_var = tk.StringVar(value=self.settings.get('start_date', datetime.now().date().isoformat()))
        start_date_entry = ttk.Entry(basic_frame, textvariable=start_date_var, width=40)
        start_date_entry.grid(row=3, column=1, padx=5, pady=2)
        
        # === –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ü–ò–°–ê–ù–ò–Ø ===
        schedule_frame = ttk.LabelFrame(main_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", padding="10")
        schedule_frame.grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(schedule_frame, text="–î–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        days_per_week_var = tk.StringVar(value=str(self.settings.get('days_per_week', 5)))
        days_per_week_spin = ttk.Spinbox(schedule_frame, from_=1, to=7, textvariable=days_per_week_var, width=10)
        days_per_week_spin.grid(row=0, column=1, padx=5, pady=2, sticky=tk.W)
        
        ttk.Label(schedule_frame, text="–ó–∞–Ω—è—Ç–∏–π –≤ –¥–µ–Ω—å:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        lessons_per_day_var = tk.StringVar(value=str(self.settings.get('lessons_per_day', 6)))
        lessons_per_day_spin = ttk.Spinbox(schedule_frame, from_=1, to=12, textvariable=lessons_per_day_var, width=10)
        lessons_per_day_spin.grid(row=1, column=1, padx=5, pady=2, sticky=tk.W)
        
        ttk.Label(schedule_frame, text="–ù–µ–¥–µ–ª—å:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        weeks_var = tk.StringVar(value=str(self.settings.get('weeks', 2)))
        weeks_spin = ttk.Spinbox(schedule_frame, from_=1, to=52, textvariable=weeks_var, width=10)
        weeks_spin.grid(row=2, column=1, padx=5, pady=2, sticky=tk.W)
        
        # === –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–í–û–ù–ö–û–í ===
        bell_frame = ttk.LabelFrame(main_frame, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤", padding="10")
        bell_frame.grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(bell_frame, text="–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
        bell_schedule_var = tk.StringVar(value=self.settings.get('bell_schedule', '8:00-8:45,8:55-9:40,9:50-10:35,10:45-11:30,11:40-12:25,12:35-13:20'))
        bell_schedule_display = ttk.Entry(bell_frame, textvariable=bell_schedule_var, width=50, state='readonly')
        bell_schedule_display.grid(row=1, column=0, columnspan=2, padx=5, pady=2, sticky=tk.W)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        open_editor_btn = ttk.Button(bell_frame, text="‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä...", 
                                   command=lambda: self.open_bell_schedule_editor(bell_schedule_var, dialog))
        open_editor_btn.grid(row=2, column=0, columnspan=2, pady=(5, 2), padx=5, sticky=tk.W)
        
        # –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π
        ttk.Label(bell_frame, text="–†–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤", font=('Segoe UI', 9, 'italic')).grid(row=3, column=0, columnspan=2, sticky=tk.W, padx=5, pady=(0, 2))
        
        # === –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û-–ë–≠–ö–ê–ü–ê ===
        backup_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞", padding="10")
        backup_frame.grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        
        ttk.Label(backup_frame, text="–ê–≤—Ç–æ-–±—ç–∫–∞–ø:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        auto_backup_var = tk.BooleanVar(value=self.settings.get('auto_backup', True))
        auto_backup_check = ttk.Checkbutton(backup_frame, variable=auto_backup_var)
        auto_backup_check.grid(row=0, column=1, padx=5, pady=2, sticky=tk.W)
        
        ttk.Label(backup_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –±—ç–∫–∞–ø–∞ (–º–∏–Ω):").grid(row=1, column=0, sticky=tk.W, padx=5, pady=2)
        backup_interval_var = tk.StringVar(value=str(self.settings.get('backup_interval', 30)))
        backup_interval_spin = ttk.Spinbox(backup_frame, from_=1, to=1440, textvariable=backup_interval_var, width=10)
        backup_interval_spin.grid(row=1, column=1, padx=5, pady=2, sticky=tk.W)
        
        ttk.Label(backup_frame, text="–ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=2)
        max_backups_var = tk.StringVar(value=str(self.settings.get('max_backups', 10)))
        max_backups_spin = ttk.Spinbox(backup_frame, from_=1, to=100, textvariable=max_backups_var, width=10)
        max_backups_spin.grid(row=2, column=1, padx=5, pady=2, sticky=tk.W)
        
        def save_settings():
            self.settings['school_name'] = school_name_var.get()
            self.settings['director'] = director_var.get()
            self.settings['academic_year'] = academic_year_var.get()
            self.settings['start_date'] = start_date_var.get()
            self.settings['days_per_week'] = int(days_per_week_var.get())
            self.settings['lessons_per_day'] = int(lessons_per_day_var.get())
            self.settings['weeks'] = int(weeks_var.get())
            self.settings['auto_backup'] = auto_backup_var.get()
            self.settings['backup_interval'] = int(backup_interval_var.get())
            self.settings['max_backups'] = int(max_backups_var.get())
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–æ
            self.days_var.set(days_per_week_var.get())
            self.lessons_var.set(lessons_per_day_var.get())
            self.weeks_var.set(weeks_var.get())
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –±—ç–∫–∞–ø–∞
            self.restart_auto_backup()
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—ç–∫–∞–ø–∞
            self.update_backup_indicator()
            dialog.destroy()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = ttk.Button(main_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings)
        save_button.grid(row=4, column=0, pady=20, padx=5, sticky=tk.E)
        
    def open_bell_schedule_editor(self, bell_schedule_var, parent_dialog):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤"""
        current_schedule = bell_schedule_var.get()
        editor = BellScheduleEditor(self.root, current_schedule)
        self.root.wait_window(editor.dialog)  # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        
        if editor.result is not None:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            bell_schedule_var.set(editor.result)
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.settings['bell_schedule'] = editor.result

    def show_reports(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç—ã"""
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ—Ç—á–µ—Ç–æ–≤
        notebook = self.reports_frame.master
        notebook.select(self.reports_frame)
        self.update_reports()

    def open_substitutions(self):
        """–û—Ç–∫—Ä—ã—Ç—å –∂—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–º–µ–Ω
        dialog = tk.Toplevel(self.root)
        dialog.title("–ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω")
        dialog.geometry("800x600")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ–Ω
        columns = ('–î–∞—Ç–∞', '–ì—Ä—É–ø–ø–∞', '–ü–∞—Ä–∞', '–ü—Ä–µ–¥–º–µ—Ç', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ó–∞–º–µ–Ω–∞', '–ü—Ä–∏—á–∏–Ω–∞')
        self.substitutions_tree = ttk.Treeview(dialog, columns=columns, show='headings', height=20)
        for col in columns:
            self.substitutions_tree.heading(col, text=col)
            self.substitutions_tree.column(col, width=120)
        self.substitutions_tree.pack(fill=tk.BOTH, expand=True, side=tk.LEFT, padx=10, pady=10)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(dialog, orient=tk.VERTICAL, command=self.substitutions_tree.yview)
        self.substitutions_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(dialog)
        buttons_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        ttk.Button(buttons_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É", command=self.add_substitution).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self.edit_substitution).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_substitution).pack(side=tk.LEFT)
        ttk.Button(buttons_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", command=self.export_substitutions).pack(side=tk.RIGHT)
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_substitutions_data()

    def load_substitutions_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–º–µ–Ω"""
        self.substitutions_tree.delete(*self.substitutions_tree.get_children())
        for substitution in self.substitutions:
            self.substitutions_tree.insert('', tk.END, values=(
                substitution.get('date', ''),
                substitution.get('group', ''),
                substitution.get('lesson', ''),
                substitution.get('subject', ''),
                substitution.get('teacher', ''),
                substitution.get('replacement', ''),
                substitution.get('reason', '')
            ))

    def add_substitution(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É –≤ –∂—É—Ä–Ω–∞–ª –≤—Ä—É—á–Ω—É—é"""
        if not self.teachers or len(self.teachers) < 2:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ª–∏—á–∏–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤—É—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ–Ω—É")
        dialog.geometry("500x500")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        date_var = tk.StringVar(value=datetime.now().strftime('%Y-%m-%d'))
        date_entry = ttk.Entry(dialog, textvariable=date_var, width=30)
        date_entry.grid(row=0, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ù–µ–¥–µ–ª—è:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        week_var = tk.StringVar(value="1")
        week_combo = ttk.Combobox(dialog, textvariable=week_var, values=[str(i) for i in range(1, self.settings['weeks'] + 1)], state="readonly", width=5)
        week_combo.grid(row=1, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        day_var = tk.StringVar()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        day_combo = ttk.Combobox(dialog, textvariable=day_var, values=days, state="readonly", width=15)
        day_combo.grid(row=2, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–í—Ä–µ–º—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        time_var = tk.StringVar()
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        time_combo = ttk.Combobox(dialog, textvariable=time_var, values=times, state="readonly", width=15)
        time_combo.grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ì—Ä—É–ø–ø–∞:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        group_var = tk.StringVar()
        group_names = [g['name'] for g in self.groups]
        group_combo = ttk.Combobox(dialog, textvariable=group_var, values=group_names, state="readonly", width=30)
        group_combo.grid(row=4, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        subject_var = tk.StringVar()
        subject_names = [s['name'] for s in self.subjects]
        subject_combo = ttk.Combobox(dialog, textvariable=subject_var, values=subject_names, state="readonly", width=30)
        subject_combo.grid(row=5, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        original_teacher_var = tk.StringVar()
        teacher_names = [t['name'] for t in self.teachers]
        original_teacher_combo = ttk.Combobox(dialog, textvariable=original_teacher_var, values=teacher_names, state="readonly", width=30)
        original_teacher_combo.grid(row=6, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ó–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=7, column=0, sticky=tk.W, padx=10, pady=5)
        replacement_teacher_var = tk.StringVar()
        replacement_teacher_combo = ttk.Combobox(dialog, textvariable=replacement_teacher_var, values=teacher_names, state="readonly", width=30)
        replacement_teacher_combo.grid(row=7, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã:").grid(row=8, column=0, sticky=tk.W, padx=10, pady=5)
        reason_var = tk.StringVar()
        reason_combo = ttk.Combobox(dialog, textvariable=reason_var, 
                                   values=["–ë–æ–ª–µ–∑–Ω—å", "–û—Ç–ø—É—Å–∫", "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "–î—Ä—É–≥–æ–µ"], state="readonly", width=30)
        reason_combo.grid(row=8, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–î–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ '–î—Ä—É–≥–æ–µ'):").grid(row=9, column=0, sticky=tk.W, padx=10, pady=5)
        details_entry = ttk.Entry(dialog, width=30)
        details_entry.grid(row=9, column=1, sticky=tk.W, padx=10, pady=5)
        is_temporary_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(dialog, text="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞", variable=is_temporary_var).grid(row=10, column=0, columnspan=2, sticky=tk.W, padx=10, pady=5)
        def save_manual_substitution():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = [
                date_var.get(), week_var.get(), day_var.get(), time_var.get(),
                group_var.get(), subject_var.get(), original_teacher_var.get(), replacement_teacher_var.get()
            ]
            if not all(required_fields):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            if original_teacher_var.get() == replacement_teacher_var.get():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏")
                return
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏—á–∏–Ω—É
            reason = reason_var.get()
            if reason == "–î—Ä—É–≥–æ–µ":
                reason = details_entry.get() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            original_teacher = next((t for t in self.teachers if t['name'] == original_teacher_var.get()), None)
            replacement_teacher = next((t for t in self.teachers if t['name'] == replacement_teacher_var.get()), None)
            if not original_teacher or not replacement_teacher:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
                return
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            substitution_record = {
                'date': date_var.get(),
                'week': int(week_var.get()),
                'day': day_var.get(),
                'time': time_var.get(),
                'group': group_var.get(),
                'subject': subject_var.get(),
                'original_teacher': original_teacher_var.get(),
                'replacement_teacher': replacement_teacher_var.get(),
                'reason': reason,
                'is_temporary': is_temporary_var.get(),
                'original_teacher_id': original_teacher['id'],
                'schedule_index': -1  # -1 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–º–µ–Ω–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            }
            self.substitutions.append(substitution_record)
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            target_lesson = self.schedule[
                (self.schedule['week'] == int(week_var.get())) &
                (self.schedule['day'] == day_var.get()) &
                (self.schedule['time'] == time_var.get()) &
                (self.schedule['group_name'] == group_var.get()) &
                (self.schedule['subject_name'] == subject_var.get()) &
                (self.schedule['teacher_name'] == original_teacher_var.get()) &
                (self.schedule['status'] == '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')
            ]
            if not target_lesson.empty:
                idx = target_lesson.index[0]
                self.schedule.loc[idx, 'teacher_id'] = replacement_teacher['id']
                self.schedule.loc[idx, 'teacher_name'] = replacement_teacher['name']
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–ø–∏—Å–∏ –∑–∞–º–µ–Ω—ã
                self.substitutions[-1]['schedule_index'] = int(idx)
                self.filter_schedule()
            self.load_substitutions_data()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª!")
            dialog.destroy()
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_manual_substitution).grid(row=11, column=0, columnspan=2, pady=20)

    def edit_substitution(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ–Ω—É –≤ –∂—É—Ä–Ω–∞–ª–µ"""
        selected = self.substitutions_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        item = self.substitutions_tree.item(selected[0])
        values = item['values']
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ –¥–∞—Ç–µ, –≥—Ä—É–ø–ø–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ (—ç—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ–¥–æ–π–¥–µ—Ç)
        substitution_to_edit = None
        for sub in self.substitutions:
            if (sub.get('date') == values[0] and
                sub.get('group') == values[1] and
                sub.get('time') == values[2]):
                substitution_to_edit = sub
                break
        if not substitution_to_edit:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ–Ω—É")
        dialog.geometry("500x500")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="–î–∞—Ç–∞ –∑–∞–º–µ–Ω—ã (–ì–ì–ì–ì-–ú–ú-–î–î):").grid(row=0, column=0, sticky=tk.W, padx=10, pady=5)
        date_var = tk.StringVar(value=substitution_to_edit.get('date', ''))
        date_entry = ttk.Entry(dialog, textvariable=date_var, width=30)
        date_entry.grid(row=0, column=1, padx=10, pady=5)
        ttk.Label(dialog, text="–ù–µ–¥–µ–ª—è:").grid(row=1, column=0, sticky=tk.W, padx=10, pady=5)
        week_var = tk.StringVar(value=str(substitution_to_edit.get('week', 1)))
        week_combo = ttk.Combobox(dialog, textvariable=week_var, values=[str(i) for i in range(1, self.settings['weeks'] + 1)], state="readonly", width=5)
        week_combo.grid(row=1, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:").grid(row=2, column=0, sticky=tk.W, padx=10, pady=5)
        day_var = tk.StringVar(value=substitution_to_edit.get('day', ''))
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'][:self.settings['days_per_week']]
        day_combo = ttk.Combobox(dialog, textvariable=day_var, values=days, state="readonly", width=15)
        day_combo.grid(row=2, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–í—Ä–µ–º—è:").grid(row=3, column=0, sticky=tk.W, padx=10, pady=5)
        time_var = tk.StringVar(value=substitution_to_edit.get('time', ''))
        times = [f"{8+i}:00-{8+i}:45" for i in range(self.settings['lessons_per_day'])]
        time_combo = ttk.Combobox(dialog, textvariable=time_var, values=times, state="readonly", width=15)
        time_combo.grid(row=3, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ì—Ä—É–ø–ø–∞:").grid(row=4, column=0, sticky=tk.W, padx=10, pady=5)
        group_var = tk.StringVar(value=substitution_to_edit.get('group', ''))
        group_names = [g['name'] for g in self.groups]
        group_combo = ttk.Combobox(dialog, textvariable=group_var, values=group_names, state="readonly", width=30)
        group_combo.grid(row=4, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–µ–¥–º–µ—Ç:").grid(row=5, column=0, sticky=tk.W, padx=10, pady=5)
        subject_var = tk.StringVar(value=substitution_to_edit.get('subject', ''))
        subject_names = [s['name'] for s in self.subjects]
        subject_combo = ttk.Combobox(dialog, textvariable=subject_var, values=subject_names, state="readonly", width=30)
        subject_combo.grid(row=5, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=6, column=0, sticky=tk.W, padx=10, pady=5)
        original_teacher_var = tk.StringVar(value=substitution_to_edit.get('original_teacher', ''))
        teacher_names = [t['name'] for t in self.teachers]
        original_teacher_combo = ttk.Combobox(dialog, textvariable=original_teacher_var, values=teacher_names, state="readonly", width=30)
        original_teacher_combo.grid(row=6, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ó–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:").grid(row=7, column=0, sticky=tk.W, padx=10, pady=5)
        replacement_teacher_var = tk.StringVar(value=substitution_to_edit.get('replacement_teacher', ''))
        replacement_teacher_combo = ttk.Combobox(dialog, textvariable=replacement_teacher_var, values=teacher_names, state="readonly", width=30)
        replacement_teacher_combo.grid(row=7, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã:").grid(row=8, column=0, sticky=tk.W, padx=10, pady=5)
        reason_var = tk.StringVar(value="–î—Ä—É–≥–æ–µ") # –£–ø—Ä–æ—â–∞–µ–º, –≤—Å–µ–≥–¥–∞ "–î—Ä—É–≥–æ–µ"
        reason_combo = ttk.Combobox(dialog, textvariable=reason_var, 
                                   values=["–ë–æ–ª–µ–∑–Ω—å", "–û—Ç–ø—É—Å–∫", "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "–î—Ä—É–≥–æ–µ"], state="readonly", width=30)
        reason_combo.grid(row=8, column=1, sticky=tk.W, padx=10, pady=5)
        ttk.Label(dialog, text="–î–µ—Ç–∞–ª–∏:").grid(row=9, column=0, sticky=tk.W, padx=10, pady=5)
        details_var = tk.StringVar(value=substitution_to_edit.get('reason', ''))
        details_entry = ttk.Entry(dialog, textvariable=details_var, width=30)
        details_entry.grid(row=9, column=1, sticky=tk.W, padx=10, pady=5)
        is_temporary_var = tk.BooleanVar(value=substitution_to_edit.get('is_temporary', True))
        ttk.Checkbutton(dialog, text="–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞", variable=is_temporary_var).grid(row=10, column=0, columnspan=2, sticky=tk.W, padx=10, pady=5)
        def update_substitution():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            required_fields = [
                date_var.get(), week_var.get(), day_var.get(), time_var.get(),
                group_var.get(), subject_var.get(), original_teacher_var.get(), replacement_teacher_var.get()
            ]
            if not all(required_fields):
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                return
            if original_teacher_var.get() == replacement_teacher_var.get():
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏ –∑–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏")
                return
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø–∏—Å–∏
            substitution_to_edit['date'] = date_var.get()
            substitution_to_edit['week'] = int(week_var.get())
            substitution_to_edit['day'] = day_var.get()
            substitution_to_edit['time'] = time_var.get()
            substitution_to_edit['group'] = group_var.get()
            substitution_to_edit['subject'] = subject_var.get()
            substitution_to_edit['original_teacher'] = original_teacher_var.get()
            substitution_to_edit['replacement_teacher'] = replacement_teacher_var.get()
            substitution_to_edit['reason'] = details_var.get()
            substitution_to_edit['is_temporary'] = is_temporary_var.get()
            # –ï—Å–ª–∏ –∑–∞–º–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (schedule_index >= 0), –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –µ–≥–æ
            if substitution_to_edit.get('schedule_index', -1) >= 0:
                idx = substitution_to_edit['schedule_index']
                # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
                new_teacher = next((t for t in self.teachers if t['name'] == replacement_teacher_var.get()), None)
                if new_teacher:
                    self.schedule.loc[idx, 'teacher_id'] = new_teacher['id']
                    self.schedule.loc[idx, 'teacher_name'] = new_teacher['name']
                    self.filter_schedule()
            self.load_substitutions_data()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            dialog.destroy()
        ttk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=update_substitution).grid(row=11, column=0, columnspan=2, pady=20)

    def delete_substitution(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ–Ω—É –∏–∑ –∂—É—Ä–Ω–∞–ª–∞"""
        selected = self.substitutions_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ–Ω—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        item = self.substitutions_tree.item(selected[0])
        values = item['values']
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        substitution_to_delete = None
        for i, sub in enumerate(self.substitutions):
            if (sub.get('date') == values[0] and
                sub.get('group') == values[1] and
                sub.get('time') == values[2]):
                substitution_to_delete = sub
                delete_index = i
                break
        if not substitution_to_delete:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–º–µ–Ω—É?"):
            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ –∏ –æ–Ω–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            if (substitution_to_delete.get('is_temporary', False) and
                substitution_to_delete.get('schedule_index', -1) >= 0):
                idx = substitution_to_delete['schedule_index']
                original_teacher_id = substitution_to_delete.get('original_teacher_id')
                original_teacher_name = substitution_to_delete.get('original_teacher')
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID
                original_teacher = next((t for t in self.teachers if t['id'] == original_teacher_id), None)
                if original_teacher:
                    self.schedule.loc[idx, 'teacher_id'] = original_teacher_id
                    self.schedule.loc[idx, 'teacher_name'] = original_teacher_name
                    self.filter_schedule()
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            del self.substitutions[delete_index]
            self.load_substitutions_data()
            self.create_backup()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ó–∞–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    def export_substitutions(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–º–µ–Ω –≤ Excel"""
        if not self.substitutions:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω –ø—É—Å—Ç")
            return
        filename = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω –∫–∞–∫"
        )
        if filename:
            try:
                # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ–Ω
                df = pd.DataFrame(self.substitutions)
                # –í—ã–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_df = df[['date', 'week', 'day', 'time', 'group', 'subject', 
                               'original_teacher', 'replacement_teacher', 'reason', 'is_temporary']]
                export_df.columns = ['–î–∞—Ç–∞', '–ù–µ–¥–µ–ª—è', '–î–µ–Ω—å', '–í—Ä–µ–º—è', '–ì—Ä—É–ø–ø–∞', '–ü—Ä–µ–¥–º–µ—Ç',
                                    '–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ó–∞–º–µ–Ω—è—é—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ü—Ä–∏—á–∏–Ω–∞', '–í—Ä–µ–º–µ–Ω–Ω–∞—è']
                with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                    export_df.to_excel(writer, sheet_name='–ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω', index=False)
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–ñ—É—Ä–Ω–∞–ª –∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")

    def open_backup_manager(self):
        """–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±—ç–∫–∞–ø–æ–≤
        dialog = tk.Toplevel(self.root)
        dialog.title("–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤")
        dialog.geometry("600x400")
        dialog.transient(self.root)
        dialog.grab_set()
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        ttk.Label(dialog, text="üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤", font=('Arial', 14, 'bold')).pack(pady=10)
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
        list_frame = ttk.Frame(dialog)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        # –¢–∞–±–ª–∏—Ü–∞ –±—ç–∫–∞–ø–æ–≤
        columns = ('–ò–º—è —Ñ–∞–π–ª–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–†–∞–∑–º–µ—Ä')
        self.backup_tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        for col in columns:
            self.backup_tree.heading(col, text=col)
            self.backup_tree.column(col, width=180)
        self.backup_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.backup_tree.yview)
        self.backup_tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        # --- –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é ---
        context_menu = tk.Menu(self.backup_tree, tearoff=0)
        context_menu.add_command(label="üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", command=self.restore_backup)
        context_menu.add_command(label="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self.delete_backup)
        context_menu.add_separator()
        context_menu.add_command(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.load_backup_list)
        def show_context_menu(event):
            item = self.backup_tree.identify_row(event.y)
            if item:
                self.backup_tree.selection_set(item)
                context_menu.post(event.x_root, event.y_root)
        self.backup_tree.bind("<Button-3>", show_context_menu)  # –ü–ö–ú –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å Accent.TButton)
        button_frame = ttk.Frame(dialog)
        button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        buttons = [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self.load_backup_list),
            ("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", self.create_backup),
            ("üìÇ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", self.restore_backup),
            ("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", self.delete_backup)
        ]
        for text, command in buttons:
            btn = ttk.Button(button_frame, text=text, command=command, style='Accent.TButton')
            btn.pack(side=tk.LEFT, padx=(0, 5))
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤
        self.load_backup_list()

    def load_backup_list(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.backup_tree.get_children():
            self.backup_tree.delete(item)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
        try:
            backup_files = [f for f in os.listdir(self.backup_dir) if f.endswith('.zip')]
            backup_files.sort(reverse=True) # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
            for filename in backup_files:
                filepath = os.path.join(self.backup_dir, filename)
                stat = os.stat(filepath)
                creation_time = datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')
                size = stat.st_size
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
                if size < 1024:
                    size_str = f"{size} B"
                elif size < 1024**2:
                    size_str = f"{size/1024:.1f} KB"
                else:
                    size_str = f"{size/(1024**2):.1f} MB"
                self.backup_tree.insert('', tk.END, values=(filename, creation_time, size_str))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")

    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"""
        selected = self.backup_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        item = self.backup_tree.item(selected[0])
        filename = item['values'][0]
        filepath = os.path.join(self.backup_dir, filename)
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {filename}?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."):
            try:
                # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
                with zipfile.ZipFile(filepath, 'r') as zip_ref:
                    zip_ref.extractall('.') # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {filename}")
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                self.load_data()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

    def delete_backup(self):
        """–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø"""
        selected = self.backup_tree.selection()
        if not selected:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –±—ç–∫–∞–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        item = self.backup_tree.item(selected[0])
        filename = item['values'][0]
        filepath = os.path.join(self.backup_dir, filename)
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {filename}?"):
            try:
                os.remove(filepath)
                self.load_backup_list() # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ë—ç–∫–∞–ø {filename} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

    def create_backup(self):
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"backup_{timestamp}.zip"
            backup_filepath = os.path.join(self.backup_dir, backup_filename)
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
            temp_data_file = "temp_data.json"
            data = {
                'settings': self.settings,
                'groups': self.groups,
                'teachers': self.teachers,
                'classrooms': self.classrooms,
                'subjects': self.subjects,
                'schedule': self.schedule.to_dict() if not self.schedule.empty else {},
                'substitutions': self.substitutions,
                'holidays': self.holidays
            }
            with open(temp_data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            with zipfile.ZipFile(backup_filepath, 'w') as zipf:
                zipf.write(temp_data_file)
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.remove(temp_data_file)
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            self.cleanup_old_backups()
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
            self.last_backup_time = datetime.now()
            self.update_backup_indicator()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")

    def cleanup_old_backups(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        try:
            backup_files = [f for f in os.listdir(self.backup_dir) if f.endswith('.zip')]
            backup_files.sort(key=lambda x: os.path.getctime(os.path.join(self.backup_dir, x)))
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
            while len(backup_files) > self.settings.get('max_backups', 10):
                oldest_file = backup_files.pop(0)
                os.remove(os.path.join(self.backup_dir, oldest_file))
        except Exception as e:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏

    def start_auto_backup(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞"""
        if self.settings.get('auto_backup', True):
            interval = self.settings.get('backup_interval', 30) * 60 * 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            self.backup_timer = self.root.after(interval, self.auto_backup)

    def auto_backup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø"""
        self.create_backup()
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        self.start_auto_backup()

    def restart_auto_backup(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ-–±—ç–∫–∞–ø–∞"""
        if self.backup_timer:
            self.root.after_cancel(self.backup_timer)
        self.start_auto_backup()

    def update_backup_indicator(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –±—ç–∫–∞–ø–∞"""
        if self.settings.get('auto_backup', True):
            self.backup_status_label.config(text="–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–ö–õ", style='BackupActive.TLabel')
            if self.last_backup_time:
                next_backup = self.last_backup_time + timedelta(minutes=self.settings.get('backup_interval', 30))
                self.next_backup_time = next_backup
                self.backup_info_label.config(text=f"–°–ª–µ–¥—É—é—â–∏–π: {next_backup.strftime('%H:%M')}")
            else:
                self.backup_info_label.config(text="–°–ª–µ–¥—É—é—â–∏–π: --:--")
        else:
            self.backup_status_label.config(text="–ê–≤—Ç–æ-–±—ç–∫–∞–ø: –í–´–ö–õ", style='BackupInactive.TLabel')
            self.backup_info_label.config(text="")

    def check_and_update_experience(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–∂ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        current_year = datetime.now().year
        last_update_year = self.settings.get('last_academic_year_update', current_year)
        if current_year > last_update_year:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–∂ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            for teacher in self.teachers:
                teacher['experience'] = teacher.get('experience', 0) + (current_year - last_update_year)
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.settings['last_academic_year_update'] = current_year
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.load_teachers_data()
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.create_backup()

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        dialog.geometry("605x650")
        dialog.transient(self.root)
        dialog.grab_set()
        dialog.resizable(False, False) # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ttk.Frame(dialog, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas = tk.Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –õ–æ–≥–æ—Ç–∏–ø/–ò–∫–æ–Ω–∫–∞
        try:
            logo_label = ttk.Label(scrollable_frame, text="üéì", font=('Arial', 48, 'bold'))
            logo_label.pack(pady=(0, 10))
        except:
            pass

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        title_label = ttk.Label(scrollable_frame, text="–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 5))

        # –í–µ—Ä—Å–∏—è
        version_label = ttk.Label(scrollable_frame, text="–í–µ—Ä—Å–∏—è 2.0", font=('Arial', 11, 'bold'))
        version_label.pack(pady=(0, 15))

        # –û–ø–∏—Å–∞–Ω–∏–µ
        description_text = (
            "–≠—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
            "–ø—Ä–æ—Ü–µ—Å—Å–æ–º —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É—á–µ–±–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö.\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤ —Å–µ–±–µ –º–æ—â–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≥–∏–±–∫–∏–µ\n"
            "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–µ –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è\n"
            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∑–∞–≤—É—á–µ–π."
        )
        desc_label = ttk.Label(scrollable_frame, text=description_text, justify=tk.LEFT)
        desc_label.pack(pady=(0, 20), anchor='w')

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        features_title = ttk.Label(scrollable_frame, text="üîë –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:", font=('Arial', 12, 'bold'))
        features_title.pack(pady=(0, 10), anchor='w')

        features_text = (
            "‚Ä¢ üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ ‚úçÔ∏è –ü–æ–ª–Ω—ã–π —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
            "‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∞–º–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —Å –≤–µ–¥–µ–Ω–∏–µ–º –∂—É—Ä–Ω–∞–ª–∞\n"
            "‚Ä¢ üìÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –≥—Ä—É–ø–ø\n"
            "‚Ä¢ üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤\n"
            "‚Ä¢ üíæ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π\n"
            "‚Ä¢ üåê –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ HTML –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç Excel\n"
            "‚Ä¢ üõ°Ô∏è–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏ —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö: –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –ø—Ä–µ–¥–º–µ—Ç—ã, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"
        )
        features_label = ttk.Label(scrollable_frame, text=features_text, justify=tk.LEFT)
        features_label.pack(pady=(0, 20), anchor='w')

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–µ
        dev_frame = ttk.Frame(scrollable_frame)
        dev_frame.pack(fill=tk.X, pady=(0, 10), anchor='w')
        ttk.Label(dev_frame, text="üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:", font=('Arial', 10, 'bold')).pack(anchor='w')
        ttk.Label(dev_frame, text="–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Mikhail Lukomskiy").pack(anchor='w')
        ttk.Label(dev_frame, text="üìß –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞: support@lukomsky.ru").pack(anchor='w')
        ttk.Label(dev_frame, text="üåê –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: www.lukomsky.ru").pack(anchor='w')
        ttk.Label(dev_frame, text="üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: 2025").pack(anchor='w')

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á—Ä–µ–∂–¥–µ–Ω–∏–∏
        school_frame = ttk.Frame(scrollable_frame)
        school_frame.pack(fill=tk.X, pady=(20, 10), anchor='w')
        ttk.Label(school_frame, text="üè´ –¢–µ–∫—É—â–µ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ:", font=('Arial', 10, 'bold')).pack(anchor='w')
        ttk.Label(school_frame, text=f"{self.settings.get('school_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}").pack(anchor='w')
        ttk.Label(school_frame, text=f"–î–∏—Ä–µ–∫—Ç–æ—Ä: {self.settings.get('director', '–ù–µ —É–∫–∞–∑–∞–Ω')}").pack(anchor='w')
        ttk.Label(school_frame, text=f"–£—á–µ–±–Ω—ã–π –≥–æ–¥: {self.settings.get('academic_year', '–ù–µ —É–∫–∞–∑–∞–Ω')}").pack(anchor='w')

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = ttk.Button(scrollable_frame, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy)
        close_button.pack(pady=(20, 0))

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = ScheduleApp(root)
    root.mainloop()
